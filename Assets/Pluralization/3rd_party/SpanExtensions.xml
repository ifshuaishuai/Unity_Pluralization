<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SpanExtensions</name>
    </assembly>
    <members>
        <member name="T:SpanExtensions.CountExceedingBehaviour">
            <summary>
            Defines the behaviour of a split operation when there are more split instances than there may be.
            </summary>
        </member>
        <member name="F:SpanExtensions.CountExceedingBehaviour.AppendRemainingElements">
            <summary>
            The last split returned will include all the remaining elements.
            </summary>
        </member>
        <member name="F:SpanExtensions.CountExceedingBehaviour.CutRemainingElements">
            <summary>
            Splits after the desired split count will be cut.
            </summary>
        </member>
        <member name="T:SpanExtensions.Enumerators.SpanSplitEnumerator`1">
            <summary>
            Supports iteration over a <see cref="T:System.ReadOnlySpan`1"/> by splitting it at a specified delimiter of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of elements in the enumerated <see cref="T:System.ReadOnlySpan`1"/>.</typeparam>
        </member>
        <member name="P:SpanExtensions.Enumerators.SpanSplitEnumerator`1.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
        </member>
        <member name="M:SpanExtensions.Enumerators.SpanSplitEnumerator`1.#ctor(System.ReadOnlySpan{`0},`0)">
            <summary>
            Constructs a <see cref="T:SpanExtensions.Enumerators.SpanSplitEnumerator`1"/> from a span and a delimiter. <strong>Only consume this class through <see cref="M:SpanExtensions.ReadOnlySpanExtensions.Split``1(System.ReadOnlySpan{``0},``0)"/></strong>.
            </summary>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to be split.</param>
            <param name="delimiter">An instance of <typeparamref name="T"/> that delimits the various sub-ReadOnlySpans in <paramref name="source"/>.</param>
        </member>
        <member name="M:SpanExtensions.Enumerators.SpanSplitEnumerator`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
        </member>
        <member name="M:SpanExtensions.Enumerators.SpanSplitEnumerator`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns><see langword="true"/> if the enumerator was successfully advanced to the next element; <see langword="false"/> if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="T:SpanExtensions.Enumerators.SpanSplitStringSplitOptionsEnumerator">
            <summary>
            Supports iteration over a <see cref="T:System.ReadOnlySpan`1"/> by splitting it at a specified delimiter and based on specified <see cref="T:System.StringSplitOptions"/>.
            </summary>
        </member>
        <member name="P:SpanExtensions.Enumerators.SpanSplitStringSplitOptionsEnumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
        </member>
        <member name="M:SpanExtensions.Enumerators.SpanSplitStringSplitOptionsEnumerator.#ctor(System.ReadOnlySpan{System.Char},System.Char,System.StringSplitOptions)">
            <summary>
            Constructs a <see cref="T:SpanExtensions.Enumerators.SpanSplitStringSplitOptionsEnumerator"/> from a span and a delimiter. <strong>Only consume this class through <see cref="M:SpanExtensions.ReadOnlySpanExtensions.Split(System.ReadOnlySpan{System.Char},System.Char,System.StringSplitOptions)"/></strong>.
            </summary>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to be split.</param>
            <param name="delimiter">A <see cref="T:System.Char"/> that delimits the various sub-ReadOnlySpans in <paramref name="source"/>.</param>
            <param name="options">A bitwise combination of the enumeration values that specifies whether to trim results and include empty results.</param>
        </member>
        <member name="M:SpanExtensions.Enumerators.SpanSplitStringSplitOptionsEnumerator.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
        </member>
        <member name="M:SpanExtensions.Enumerators.SpanSplitStringSplitOptionsEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns><see langword="true"/> if the enumerator was successfully advanced to the next element; <see langword="false"/> if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="T:SpanExtensions.Enumerators.SpanSplitStringSplitOptionsWithCountEnumerator">
            <summary>
            Supports iteration over a <see cref="T:System.ReadOnlySpan`1"/> by splitting it at a specified delimiter and based on specified <see cref="T:System.StringSplitOptions"/>  with an upper limit of splits performed.
            </summary>
        </member>
        <member name="P:SpanExtensions.Enumerators.SpanSplitStringSplitOptionsWithCountEnumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
        </member>
        <member name="M:SpanExtensions.Enumerators.SpanSplitStringSplitOptionsWithCountEnumerator.#ctor(System.ReadOnlySpan{System.Char},System.Char,System.Int32,System.StringSplitOptions,SpanExtensions.CountExceedingBehaviour)">
            <summary>
            Constructs a <see cref="T:SpanExtensions.Enumerators.SpanSplitStringSplitOptionsWithCountEnumerator"/> from a span and a delimiter. <strong>Only consume this class through <see cref="M:SpanExtensions.ReadOnlySpanExtensions.Split(System.ReadOnlySpan{System.Char},System.Char,System.Int32,System.StringSplitOptions,SpanExtensions.CountExceedingBehaviour)"/></strong>.
            </summary>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to be split.</param>
            <param name="delimiter">A <see cref="T:System.Char"/> that delimits the various sub-ReadOnlySpans in <paramref name="source"/>.</param>
            <param name="count">The maximum number of sub-ReadOnlySpans to split into.</param>
            <param name="options">A bitwise combination of the enumeration values that specifies whether to trim results and include empty results.</param>
            <param name="countExceedingBehaviour">The handling of the instances more than count.</param>
        </member>
        <member name="M:SpanExtensions.Enumerators.SpanSplitStringSplitOptionsWithCountEnumerator.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
        </member>
        <member name="M:SpanExtensions.Enumerators.SpanSplitStringSplitOptionsWithCountEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns><see langword="true"/> if the enumerator was successfully advanced to the next element; <see langword="false"/> if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="T:SpanExtensions.Enumerators.SpanSplitWithCountEnumerator`1">
            <summary>
            Supports iteration over a <see cref="T:System.ReadOnlySpan`1"/> by splitting it a a specified delimiter of type <typeparamref name="T"/> with an upper limit of splits performed.
            </summary>
            <typeparam name="T">The type of elements in the enumerated <see cref="T:System.ReadOnlySpan`1"/>.</typeparam>
        </member>
        <member name="P:SpanExtensions.Enumerators.SpanSplitWithCountEnumerator`1.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
        </member>
        <member name="M:SpanExtensions.Enumerators.SpanSplitWithCountEnumerator`1.#ctor(System.ReadOnlySpan{`0},`0,System.Int32,SpanExtensions.CountExceedingBehaviour)">
            <summary>
            Constructs a <see cref="T:SpanExtensions.Enumerators.SpanSplitWithCountEnumerator`1"/> from a span and a delimiter. <strong>Only consume this class through <see cref="M:SpanExtensions.ReadOnlySpanExtensions.Split``1(System.ReadOnlySpan{``0},``0,System.Int32,SpanExtensions.CountExceedingBehaviour)"/></strong>.
            </summary>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to be split.</param>
            <param name="delimiter">An instance of <typeparamref name="T"/> that delimits the various sub-ReadOnlySpans in <paramref name="source"/>.</param>
            <param name="count">The maximum number of sub-ReadOnlySpans to split into.</param>
            <param name="countExceedingBehaviour">The handling of the instances more than count.</param>
        </member>
        <member name="M:SpanExtensions.Enumerators.SpanSplitWithCountEnumerator`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
        </member>
        <member name="M:SpanExtensions.Enumerators.SpanSplitWithCountEnumerator`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns><see langword="true"/> if the enumerator was successfully advanced to the next element; <see langword="false"/> if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="T:SpanExtensions.Enumerators.SpanSplitAnyEnumerator`1">
            <summary>
            Supports iteration over a <see cref="T:System.ReadOnlySpan`1"/> by splitting it at specified delimiters of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of elements in the enumerated <see cref="T:System.ReadOnlySpan`1"/>.</typeparam>
        </member>
        <member name="P:SpanExtensions.Enumerators.SpanSplitAnyEnumerator`1.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
        </member>
        <member name="M:SpanExtensions.Enumerators.SpanSplitAnyEnumerator`1.#ctor(System.ReadOnlySpan{`0},System.ReadOnlySpan{`0})">
            <summary>
            Constructs a <see cref="T:SpanExtensions.Enumerators.SpanSplitAnyEnumerator`1"/> from a span and a delimiter. <strong>Only consume this class through <see cref="M:SpanExtensions.ReadOnlySpanExtensions.SplitAny``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})"/></strong>.
            </summary>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to be split.</param>
            <param name="delimiters">A <see cref="T:System.ReadOnlySpan`1"/> with the instances of <typeparamref name="T"/> that delimit the various sub-ReadOnlySpans in <paramref name="source"/>.</param>
        </member>
        <member name="M:SpanExtensions.Enumerators.SpanSplitAnyEnumerator`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
        </member>
        <member name="M:SpanExtensions.Enumerators.SpanSplitAnyEnumerator`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns><see langword="true"/> if the enumerator was successfully advanced to the next element; <see langword="false"/> if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="T:SpanExtensions.Enumerators.SpanSplitAnyStringSplitOptionsEnumerator">
            <summary>
            Supports iteration over a <see cref="T:System.ReadOnlySpan`1"/> by splitting it at specified delimiters and based on specified <see cref="T:System.StringSplitOptions"/>.
            </summary>
        </member>
        <member name="P:SpanExtensions.Enumerators.SpanSplitAnyStringSplitOptionsEnumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
        </member>
        <member name="M:SpanExtensions.Enumerators.SpanSplitAnyStringSplitOptionsEnumerator.#ctor(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringSplitOptions)">
            <summary>
            Constructs a <see cref="T:SpanExtensions.Enumerators.SpanSplitAnyStringSplitOptionsEnumerator"/> from a span and a delimiter. <strong>Only consume this class through <see cref="M:SpanExtensions.ReadOnlySpanExtensions.SplitAny(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringSplitOptions)"/></strong>.
            </summary>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to be split.</param>
            <param name="delimiters">A <see cref="T:System.ReadOnlySpan`1"/> with the <see cref="T:System.Char"/> elements that delimit the various sub-ReadOnlySpans in <paramref name="source"/>.</param>
            <param name="options">A bitwise combination of the enumeration values that specifies whether to trim results and include empty results.</param>
        </member>
        <member name="M:SpanExtensions.Enumerators.SpanSplitAnyStringSplitOptionsEnumerator.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
        </member>
        <member name="M:SpanExtensions.Enumerators.SpanSplitAnyStringSplitOptionsEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns><see langword="true"/> if the enumerator was successfully advanced to the next element; <see langword="false"/> if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="T:SpanExtensions.Enumerators.SpanSplitAnyStringSplitOptionsWithCountEnumerator">
            <summary>
            Supports iteration over a <see cref="T:System.ReadOnlySpan`1"/> by splitting it at specified delimiters and based on specified <see cref="T:System.StringSplitOptions"/>.
            </summary>
        </member>
        <member name="P:SpanExtensions.Enumerators.SpanSplitAnyStringSplitOptionsWithCountEnumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
        </member>
        <member name="M:SpanExtensions.Enumerators.SpanSplitAnyStringSplitOptionsWithCountEnumerator.#ctor(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Int32,System.StringSplitOptions,SpanExtensions.CountExceedingBehaviour)">
            <summary>
            Constructs a <see cref="T:SpanExtensions.Enumerators.SpanSplitAnyStringSplitOptionsWithCountEnumerator"/> from a span and a delimiter. <strong>Only consume this class through <see cref="M:SpanExtensions.ReadOnlySpanExtensions.SplitAny(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Int32,System.StringSplitOptions,SpanExtensions.CountExceedingBehaviour)"/></strong>.
            </summary>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to be split.</param>
            <param name="delimiters">A <see cref="T:System.ReadOnlySpan`1"/> with the <see cref="T:System.Char"/> elements that delimit the various sub-ReadOnlySpans in <paramref name="source"/>.</param>
            <param name="count">The maximum number of sub-ReadOnlySpans to split into.</param>
            <param name="options">A bitwise combination of the enumeration values that specifies whether to trim results and include empty results.</param>
            <param name="countExceedingBehaviour">The handling of the instances more than count.</param>
        </member>
        <member name="M:SpanExtensions.Enumerators.SpanSplitAnyStringSplitOptionsWithCountEnumerator.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
        </member>
        <member name="M:SpanExtensions.Enumerators.SpanSplitAnyStringSplitOptionsWithCountEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns><see langword="true"/> if the enumerator was successfully advanced to the next element; <see langword="false"/> if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="T:SpanExtensions.Enumerators.SpanSplitAnyWithCountEnumerator`1">
            <summary>
            Supports iteration over a <see cref="T:System.ReadOnlySpan`1"/> by splitting it at specified delimiters of type <typeparamref name="T"/> with an upper limit of splits performed.
            </summary>
            <typeparam name="T">The type of elements in the enumerated <see cref="T:System.ReadOnlySpan`1"/>.</typeparam>
        </member>
        <member name="P:SpanExtensions.Enumerators.SpanSplitAnyWithCountEnumerator`1.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
        </member>
        <member name="M:SpanExtensions.Enumerators.SpanSplitAnyWithCountEnumerator`1.#ctor(System.ReadOnlySpan{`0},System.ReadOnlySpan{`0},System.Int32,SpanExtensions.CountExceedingBehaviour)">
            <summary>
            Constructs a <see cref="T:SpanExtensions.Enumerators.SpanSplitAnyEnumerator`1"/> from a span and a delimiter. <strong>Only consume this class through <see cref="M:SpanExtensions.ReadOnlySpanExtensions.SplitAny``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},System.Int32,SpanExtensions.CountExceedingBehaviour)"/></strong>.
            </summary>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to be split.</param>
            <param name="delimiters">A <see cref="T:System.ReadOnlySpan`1"/> with the instances of <typeparamref name="T"/> that delimit the various sub-ReadOnlySpans in <paramref name="source"/>.</param>
            <param name="count">The maximum number of sub-ReadOnlySpans to split into.</param>
            <param name="countExceedingBehaviour">The handling of the instances more than count.</param>
        </member>
        <member name="M:SpanExtensions.Enumerators.SpanSplitAnyWithCountEnumerator`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
        </member>
        <member name="M:SpanExtensions.Enumerators.SpanSplitAnyWithCountEnumerator`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns><see langword="true"/> if the enumerator was successfully advanced to the next element; <see langword="false"/> if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="T:SpanExtensions.Enumerators.SpanSplitSequenceEnumerator`1">
            <summary>
            Supports iteration over a <see cref="T:System.ReadOnlySpan`1"/> by splitting it at specified delimiters and based on specified <see cref="T:System.StringSplitOptions"/>.
            </summary>
            <typeparam name="T">The type of elements in the enumerated <see cref="T:System.ReadOnlySpan`1"/>.</typeparam>
        </member>
        <member name="P:SpanExtensions.Enumerators.SpanSplitSequenceEnumerator`1.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
        </member>
        <member name="M:SpanExtensions.Enumerators.SpanSplitSequenceEnumerator`1.#ctor(System.ReadOnlySpan{`0},System.ReadOnlySpan{`0})">
            <summary>
            Constructs a <see cref="T:SpanExtensions.Enumerators.SpanSplitSequenceEnumerator`1"/> from a span and a delimiter. <strong>Only consume this class through <see cref="M:SpanExtensions.ReadOnlySpanExtensions.Split``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})"/></strong>.
            </summary>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to be split.</param>
            <param name="delimiter">An instance of <see cref="T:System.ReadOnlySpan`1"/> that delimits the various sub-ReadOnlySpans in <paramref name="source"/>.</param>
        </member>
        <member name="M:SpanExtensions.Enumerators.SpanSplitSequenceEnumerator`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
        </member>
        <member name="M:SpanExtensions.Enumerators.SpanSplitSequenceEnumerator`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns><see langword="true"/> if the enumerator was successfully advanced to the next element; <see langword="false"/> if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="T:SpanExtensions.Enumerators.SpanSplitSequenceStringSplitOptionsEnumerator">
            <summary>
            Supports iteration over a <see cref="T:System.ReadOnlySpan`1"/> by splitting it at a specified delimiter and based on specified <see cref="T:System.StringSplitOptions"/>.
            </summary>
        </member>
        <member name="P:SpanExtensions.Enumerators.SpanSplitSequenceStringSplitOptionsEnumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
        </member>
        <member name="M:SpanExtensions.Enumerators.SpanSplitSequenceStringSplitOptionsEnumerator.#ctor(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringSplitOptions)">
            <summary>
            Constructs a <see cref="T:SpanExtensions.Enumerators.SpanSplitSequenceStringSplitOptionsEnumerator"/> from a span and a delimiter. <strong>Only consume this class through <see cref="M:SpanExtensions.ReadOnlySpanExtensions.Split(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringSplitOptions)"/></strong>.
            </summary>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to be split.</param>
            <param name="delimiter">An instance of <see cref="T:System.ReadOnlySpan`1"/> that delimits the various sub-ReadOnlySpans in <paramref name="source"/>.</param>
            <param name="options">A bitwise combination of the enumeration values that specifies whether to trim results and include empty results.</param>
        </member>
        <member name="M:SpanExtensions.Enumerators.SpanSplitSequenceStringSplitOptionsEnumerator.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
        </member>
        <member name="M:SpanExtensions.Enumerators.SpanSplitSequenceStringSplitOptionsEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns><see langword="true"/> if the enumerator was successfully advanced to the next element; <see langword="false"/> if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="T:SpanExtensions.Enumerators.SpanSplitSequenceStringSplitOptionsWithCountEnumerator">
            <summary>
            Supports iteration over a <see cref="T:System.ReadOnlySpan`1"/> by splitting it at a specified delimiter and based on specified <see cref="T:System.StringSplitOptions"/>  with an upper limit of splits performed.
            </summary>
        </member>
        <member name="P:SpanExtensions.Enumerators.SpanSplitSequenceStringSplitOptionsWithCountEnumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
        </member>
        <member name="M:SpanExtensions.Enumerators.SpanSplitSequenceStringSplitOptionsWithCountEnumerator.#ctor(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Int32,System.StringSplitOptions,SpanExtensions.CountExceedingBehaviour)">
            <summary>
            Constructs a <see cref="T:SpanExtensions.Enumerators.SpanSplitSequenceStringSplitOptionsWithCountEnumerator"/> from a span and a delimiter. <strong>Only consume this class through <see cref="M:SpanExtensions.ReadOnlySpanExtensions.Split(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Int32,System.StringSplitOptions,SpanExtensions.CountExceedingBehaviour)"/></strong>.
            </summary>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to be split.</param>
            <param name="delimiter">An instance of <see cref="T:System.ReadOnlySpan`1"/> that delimits the various sub-ReadOnlySpans in <paramref name="source"/>.</param>
            <param name="count">The maximum number of sub-ReadOnlySpans to split into.</param>
            <param name="options">A bitwise combination of the enumeration values that specifies whether to trim results and include empty results.</param>
            <param name="countExceedingBehaviour">The handling of the instances more than count.</param>
        </member>
        <member name="M:SpanExtensions.Enumerators.SpanSplitSequenceStringSplitOptionsWithCountEnumerator.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
        </member>
        <member name="M:SpanExtensions.Enumerators.SpanSplitSequenceStringSplitOptionsWithCountEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns><see langword="true"/> if the enumerator was successfully advanced to the next element; <see langword="false"/> if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="T:SpanExtensions.Enumerators.SpanSplitSequenceWithCountEnumerator`1">
            <summary>
            Supports iteration over a <see cref="T:System.ReadOnlySpan`1"/> by splitting it at a specified delimiter of type <typeparamref name="T"/> with an upper limit of splits performed.
            </summary>
            <typeparam name="T">The type of elements in the enumerated <see cref="T:System.ReadOnlySpan`1"/>.</typeparam>
        </member>
        <member name="P:SpanExtensions.Enumerators.SpanSplitSequenceWithCountEnumerator`1.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
        </member>
        <member name="M:SpanExtensions.Enumerators.SpanSplitSequenceWithCountEnumerator`1.#ctor(System.ReadOnlySpan{`0},System.ReadOnlySpan{`0},System.Int32,SpanExtensions.CountExceedingBehaviour)">
            <summary>
            Constructs a <see cref="T:SpanExtensions.Enumerators.SpanSplitSequenceWithCountEnumerator`1"/> from a span and a delimiter. <strong>Only consume this class through <see cref="M:SpanExtensions.ReadOnlySpanExtensions.Split``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},System.Int32,SpanExtensions.CountExceedingBehaviour)"/></strong>.
            </summary>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to be split.</param>
            <param name="delimiter">An instance of <see cref="T:System.ReadOnlySpan`1"/> that delimits the various sub-ReadOnlySpans in <paramref name="source"/>.</param>
            <param name="count">The maximum number of sub-ReadOnlySpans to split into.</param>
            <param name="countExceedingBehaviour">The handling of the instances more than count.</param>
        </member>
        <member name="M:SpanExtensions.Enumerators.SpanSplitSequenceWithCountEnumerator`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
        </member>
        <member name="M:SpanExtensions.Enumerators.SpanSplitSequenceWithCountEnumerator`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns><see langword="true"/> if the enumerator was successfully advanced to the next element; <see langword="false"/> if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="T:SpanExtensions.MemoryExtensions.SpanSplitEnumerator`1">
            <summary>
            Enables enumerating each split within a <see cref="T:System.ReadOnlySpan`1"/> that has been divided using one or more separators.
            </summary>
        </member>
        <member name="P:SpanExtensions.MemoryExtensions.SpanSplitEnumerator`1.Current">
            <summary>
            Gets the current element of the enumeration.
            </summary>
            <returns>Returns a <see cref="T:System.Range"/> instance that indicates the bounds of the current element within the source span.</returns>
        </member>
        <member name="M:SpanExtensions.MemoryExtensions.SpanSplitEnumerator`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
        </member>
        <member name="M:SpanExtensions.MemoryExtensions.SpanSplitEnumerator`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns><see langword="true"/> if the enumerator was successfully advanced to the next element; <see langword="false"/> if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="M:SpanExtensions.MemoryExtensions.Split``1(System.ReadOnlySpan{``0},``0)">
            <summary>
            Returns a type that allows for enumeration of each element within a split span
            using the provided separator character.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="source">The source span to be enumerated.</param>
            <param name="separator">The separator character to be used to split the provided span.</param>
            <returns>Returns a <see cref="T:SpanExtensions.MemoryExtensions.SpanSplitEnumerator`1"/>.</returns>
        </member>
        <member name="M:SpanExtensions.MemoryExtensions.Split``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
            <summary>
            Returns a type that allows for enumeration of each element within a split span
            using the provided separator span.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="source">The source span to be enumerated.</param>
            <param name="separator">The separator span to be used to split the provided span.</param>
            <returns>Returns a <see cref="T:SpanExtensions.MemoryExtensions.SpanSplitEnumerator`1"/>.</returns>
        </member>
        <member name="M:SpanExtensions.MemoryExtensions.SplitAny``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
            <summary>
            Returns a type that allows for enumeration of each element within a split span
            using any of the provided elements.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="source">The source span to be enumerated.</param>
            <param name="separators">The separators to be used to split the provided span.</param>
            <returns>Returns a <see cref="T:SpanExtensions.MemoryExtensions.SpanSplitEnumerator`1"/>.</returns>
        </member>
        <member name="M:SpanExtensions.MemoryExtensions.Split``1(System.Span{``0},``0)">
            <summary>
            Returns a type that allows for enumeration of each element within a split span
            using the provided separator character.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="source">The source span to be enumerated.</param>
            <param name="separator">The separator character to be used to split the provided span.</param>
            <returns>Returns a <see cref="T:SpanExtensions.MemoryExtensions.SpanSplitEnumerator`1"/>.</returns>
        </member>
        <member name="M:SpanExtensions.MemoryExtensions.Split``1(System.Span{``0},System.ReadOnlySpan{``0})">
            <summary>
            Returns a type that allows for enumeration of each element within a split span
            using the provided separator span.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="source">The source span to be enumerated.</param>
            <param name="separator">The separator span to be used to split the provided span.</param>
            <returns>Returns a <see cref="T:SpanExtensions.MemoryExtensions.SpanSplitEnumerator`1"/>.</returns>
        </member>
        <member name="M:SpanExtensions.MemoryExtensions.SplitAny``1(System.Span{``0},System.ReadOnlySpan{``0})">
            <summary>
            Returns a type that allows for enumeration of each element within a split span
            using any of the provided elements.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="source">The source span to be enumerated.</param>
            <param name="separators">The separators to be used to split the provided span.</param>
            <returns>Returns a <see cref="T:SpanExtensions.MemoryExtensions.SpanSplitEnumerator`1"/>.</returns>
        </member>
        <member name="T:SpanExtensions.ReadOnlySpanExtensions">
            <summary>
            Extension Methods for <see cref="T:System.ReadOnlySpan`1"/>.
            </summary>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.All``1(System.ReadOnlySpan{``0},System.Predicate{``0})">
            <summary>
            Determines whether all elements in <paramref name="source"/> satisfy a condition.
            </summary>
            <typeparam name="T">The type of elements in the <see cref="T:System.ReadOnlySpan`1"/>.</typeparam>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to operate on.</param>
            <param name="predicate">The condition to be satisfied.</param>
            <returns>A <see cref="T:System.Boolean"/> indicating whether or not every element in <paramref name="source"/> satisified the condition.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="predicate"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Any``1(System.ReadOnlySpan{``0},System.Predicate{``0})">
            <summary>
            Determines whether any element in <paramref name="source"/> satisfies a condition.
            </summary>
            <typeparam name="T">The type of elements in the <see cref="T:System.ReadOnlySpan`1"/>.</typeparam>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to operate on.</param>
            <param name="predicate">The condition to be satisfied.</param>
            <returns>A <see cref="T:System.Boolean"/> indicating whether or not any elements satisified the condition.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="predicate"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Average(System.ReadOnlySpan{System.Byte})">
            <summary>
            Computes the Average of all the values in <paramref name="source"/>.
            </summary>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to operate on.</param>
            <returns>The Average of all the values in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Average(System.ReadOnlySpan{System.UInt16})">
            <summary>
            Computes the Average of all the values in <paramref name="source"/>.
            </summary>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to operate on.</param>
            <returns>The Average of all the values in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Average(System.ReadOnlySpan{System.UInt32})">
            <summary>
            Computes the Average of all the values in <paramref name="source"/>.
            </summary>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to operate on.</param>
            <returns>The Average of all the values in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Average(System.ReadOnlySpan{System.UInt64})">
            <summary>
            Computes the Average of all the values in <paramref name="source"/>.
            </summary>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to operate on.</param>
            <returns>The Average of all the values in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Average(System.ReadOnlySpan{System.SByte})">
            <summary>
            Computes the Average of all the values in <paramref name="source"/>.
            </summary>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to operate on.</param>
            <returns>The Average of all the values in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Average(System.ReadOnlySpan{System.Int16})">
            <summary>
            Computes the Average of all the values in <paramref name="source"/>.
            </summary>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to operate on.</param>
            <returns>The Average of all the values in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Average(System.ReadOnlySpan{System.Int32})">
            <summary>
            Computes the Average of all the values in <paramref name="source"/>.
            </summary>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to operate on.</param>
            <returns>The Average of all the values in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Average(System.ReadOnlySpan{System.Int64})">
            <summary>
            Computes the Average of all the values in <paramref name="source"/>.
            </summary>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to operate on.</param>
            <returns>The Average of all the values in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Average(System.ReadOnlySpan{System.Single})">
            <summary>
            Computes the Average of all the values in <paramref name="source"/>.
            </summary>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to operate on.</param>
            <returns>The Average of all the values in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Average(System.ReadOnlySpan{System.Double})">
            <summary>
            Computes the Average of all the values in <paramref name="source"/>.
            </summary>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to operate on.</param>
            <returns>The Average of all the values in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Average(System.ReadOnlySpan{System.Decimal})">
            <summary>
            Computes the Average of all the values in <paramref name="source"/>.
            </summary>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to operate on.</param>
            <returns>The Average of all the values in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Average(System.ReadOnlySpan{System.Numerics.BigInteger})">
            <summary>
            Computes the Average of all the values in <paramref name="source"/>.
            </summary>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to operate on.</param>
            <returns>The Average of all the values in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Count``1(System.ReadOnlySpan{``0})">
            <summary>
            Returns the number of elements in a <see cref="T:System.ReadOnlySpan`1"/>.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">A <see cref="T:System.ReadOnlySpan`1"/> whose elements are to be counted.</param>
            <returns>The number of elements in <paramref name="source"/>.</returns>
            <exception cref="T:System.OverflowException">The number of elements in <paramref name="source"/> is larger than <see cref="F:System.Int32.MaxValue"/>.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Count``1(System.ReadOnlySpan{``0},System.Predicate{``0})">
            <summary>
            Returns a number that represents how many elements in the specified sequence satisfy a condition.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">A <see cref="T:System.ReadOnlySpan`1"/> that contains elements to be tested and counted.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>A number that represents how many elements in <paramref name="source"/> satisfy the condition in the predicate function.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="predicate"/> is null.</exception> 
            <exception cref="T:System.OverflowException">The number of elements in <paramref name="source"/> is larger than <see cref="F:System.Int32.MaxValue"/>.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Count``1(System.ReadOnlySpan{``0},``0)">
            <summary>Counts the number of times the specified <paramref name="value"/> occurs in the <paramref name="source"/>.</summary>
            <typeparam name="T">The element type of the span.</typeparam>
            <param name="source">A <see cref="T:System.ReadOnlySpan`1"/> whose elements are to be counted.</param>
            <param name="value">The value for which to search.</param>
            <returns>The number of elements eqaul to <paramref name="value"/> in <paramref name="source"/>.</returns>
            <exception cref="T:System.OverflowException">The number of elements in <paramref name="source"/> is larger than <see cref="F:System.Int32.MaxValue"/>.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Count``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
            <summary>Counts the number of times the specified <paramref name="value"/> occurs in the <paramref name="source"/>.</summary>
            <typeparam name="T">The element type of the span.</typeparam>
            <param name="source">A <see cref="T:System.ReadOnlySpan`1"/> whose elements are to be counted.</param>
            <param name="value">The value for which to search.</param>
            <returns>The number of elements eqaul to <paramref name="value"/> in <paramref name="source"/>.</returns>
            <exception cref="T:System.OverflowException">The number of elements in <paramref name="source"/> is larger than <see cref="F:System.Int32.MaxValue"/>.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.ElementAt``1(System.ReadOnlySpan{``0},System.Int32)">
            <summary>
            Returns the element at a specified index in <paramref name="source"/>.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to return an element from.</param>
            <param name="index">The zero-based index of the element to retrieve.</param> 
            <returns>The element at the specified position in <paramref name="source"/>. </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0 or greater than or equal to the number of elements in <paramref name="source"/>.</exception> 
            <remarks>This method throws an exception if <paramref name="index"/> is out of range. To instead return a default value when the specified index is out of range, use the <see cref="M:SpanExtensions.ReadOnlySpanExtensions.ElementAtOrDefault``1(System.ReadOnlySpan{``0},System.Int32)"/> method. </remarks> 
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.ElementAt``1(System.ReadOnlySpan{``0},System.Index)">
            <summary>
            Returns the element at a specified index in <paramref name="source"/>.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to return the last element of.</param>
            <param name="index">The index of the element to retrieve, which is either from the beginning or the end of the sequence.</param>
            <returns>The element at the specified position in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is outside the bounds of <paramref name="source"/>.</exception> 
            <remarks>This method throws an exception if <paramref name="index"/> is out of range. To instead return a default value when the specified index is out of range, use the <see cref="M:SpanExtensions.ReadOnlySpanExtensions.ElementAtOrDefault``1(System.ReadOnlySpan{``0},System.Index)"/> method. </remarks> 
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.ElementAtOrDefault``1(System.ReadOnlySpan{``0},System.Int32,``0)">
            <summary>
            Returns the element at a specified index in <paramref name="source"/> or a default value if the index is out of range.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to return the last element of.</param> 
            <param name="index">The zero-based index of the element to retrieve.</param> 
            <param name="defaultValue">The default value to return if <paramref name="source"/> is empty.</param>
            <returns>The element at the specified position in <paramref name="source"/>. </returns>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.ElementAtOrDefault``1(System.ReadOnlySpan{``0},System.Index,``0)">
            <summary>
            Returns the element at a specified index in <paramref name="source"/> or a default value if the index is out of range.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to return the last element of.</param>
            <param name="index">The index of the element to retrieve, which is either from the beginning or the end of the sequence.</param>
            <param name="defaultValue">The default value to return if <paramref name="source"/> is empty.</param>
            <returns>The element at the specified position in <paramref name="source"/>.</returns>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.ElementAtOrDefault``1(System.ReadOnlySpan{``0},System.Int32)">
            <summary>
            Returns the element at a specified index in <paramref name="source"/> or a default value if the index is out of range.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to return the last element of.</param> 
            <param name="index">The zero-based index of the element to retrieve.</param> 
            <returns>The element at the specified position in <paramref name="source"/>. </returns>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.ElementAtOrDefault``1(System.ReadOnlySpan{``0},System.Index)">
            <summary>
            Returns the element at a specified index in <paramref name="source"/> or a default value if the index is out of range.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to return the last element of.</param>
            <param name="index">The index of the element to retrieve, which is either from the beginning or the end of the sequence.</param>
            <returns>The element at the specified position in <paramref name="source"/>.</returns>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.First``1(System.ReadOnlySpan{``0})">
            <summary>
            Returns the first element in a <see cref="T:System.ReadOnlySpan`1"/>.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to return the first element of.</param>
            <returns>The first element in <paramref name="source"/>.</returns>
            <exception cref="T:System.InvalidOperationException"><paramref name="source"/> is empty.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.First``1(System.ReadOnlySpan{``0},System.Predicate{``0})">
            <summary>
            Returns the first element in a <see cref="T:System.ReadOnlySpan`1"/> that satisfies a specified condition.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to return the first element of.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>The first element in <paramref name="source"/> that passes the test in the specified <paramref name="predicate"/> function.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="predicate"/> is null.</exception> 
            <exception cref="T:System.InvalidOperationException">No element satisfies the condition in <paramref name="predicate"/>. -or- <paramref name="source"/> is empty.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.FirstOrDefault``1(System.ReadOnlySpan{``0},``0)">
            <summary>
            Returns the first element in a <see cref="T:System.ReadOnlySpan`1"/>, or a specified default value if the <see cref="T:System.ReadOnlySpan`1"/> contains no elements..
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to return the first element of.</param>
            <param name="defaultValue">The default value to return if <paramref name="source"/> is empty.</param>
            <returns><paramref name="defaultValue"/> if <paramref name="source"/> is empty; otherwise, the first element in <paramref name="source"/>.</returns>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.FirstOrDefault``1(System.ReadOnlySpan{``0},System.Predicate{``0},``0)">
            <summary>
            Returns the first element in a <see cref="T:System.ReadOnlySpan`1"/> that satisfies a specified condition or a specified default value if no such element is found.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to return the first element of.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="defaultValue">The default value to return if <paramref name="source"/> is empty.</param>
            <returns>default(T) if <paramref name="source"/> is empty or if no element passes the test specified by <paramref name="predicate"/>; otherwise, the first element in <paramref name="source"/> that passes the test specified by <paramref name="predicate"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="predicate"/> is null.</exception> 
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.FirstOrDefault``1(System.ReadOnlySpan{``0})">
            <summary>
            Returns the first element in a <see cref="T:System.ReadOnlySpan`1"/>, or a specified default value if the <see cref="T:System.ReadOnlySpan`1"/> contains no elements..
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to return the first element of.</param>
            <returns>default(T) if <paramref name="source"/> is empty; otherwise, the first element in <paramref name="source"/>.</returns>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.FirstOrDefault``1(System.ReadOnlySpan{``0},System.Predicate{``0})">
            <summary>
            Returns the first element in a <see cref="T:System.ReadOnlySpan`1"/> that satisfies a specified conditionor a default value if no such element is found.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to return the first element of.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>default(T) if <paramref name="source"/> is empty or if no element passes the test specified by <paramref name="predicate"/>; otherwise, the first element in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="predicate"/> is null.</exception> 
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Last``1(System.ReadOnlySpan{``0})">
            <summary>
            Returns the last element in a <see cref="T:System.ReadOnlySpan`1"/>.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to return the last element of.</param>
            <returns>The last element in <paramref name="source"/>.</returns>
            <exception cref="T:System.InvalidOperationException"><paramref name="source"/> is empty.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Last``1(System.ReadOnlySpan{``0},System.Predicate{``0})">
            <summary>
            Returns the last element in a <see cref="T:System.ReadOnlySpan`1"/> that satisfies a specified condition.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to return the last element of.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>The last element in <paramref name="source"/> that passes the test in the specified <paramref name="predicate"/> function.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="predicate"/> is null.</exception> 
            <exception cref="T:System.InvalidOperationException">No element satisfies the condition in <paramref name="predicate"/>. -or- <paramref name="source"/> is empty.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.LastOrDefault``1(System.ReadOnlySpan{``0},``0)">
            <summary>
            Returns the last element in a <see cref="T:System.ReadOnlySpan`1"/>, or a specified default value if the <see cref="T:System.ReadOnlySpan`1"/> contains no elements..
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to return the last element of.</param>
            <param name="defaultValue">The default value to return if <paramref name="source"/> is empty.</param>
            <returns><paramref name="defaultValue"/> if <paramref name="source"/> is empty; otherwise, the last element in <paramref name="source"/>.</returns>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.LastOrDefault``1(System.ReadOnlySpan{``0},System.Predicate{``0},``0)">
            <summary>
            Returns the last element in a <see cref="T:System.ReadOnlySpan`1"/> that satisfies a specified condition or a specified default value if no such element is found.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to return the last element of.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="defaultValue">The default value to return if <paramref name="source"/> is empty.</param>
            <returns>default(T) if <paramref name="source"/> is empty or if no element passes the test specified by <paramref name="predicate"/>; otherwise, the last element in <paramref name="source"/> that passes the test specified by <paramref name="predicate"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="predicate"/> is null.</exception> 
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.LastOrDefault``1(System.ReadOnlySpan{``0})">
            <summary>
            Returns the last element in a <see cref="T:System.ReadOnlySpan`1"/>, or a specified default value if the <see cref="T:System.ReadOnlySpan`1"/> contains no elements..
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to return the last element of.</param>
            <returns>default(T) if <paramref name="source"/> is empty; otherwise, the last element in <paramref name="source"/>.</returns>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.LastOrDefault``1(System.ReadOnlySpan{``0},System.Predicate{``0})">
            <summary>
            Returns the last element in a <see cref="T:System.ReadOnlySpan`1"/> that satisfies a specified conditionor a default value if no such element is found.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to return the last element of.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>default(T) if <paramref name="source"/> is empty or if no element passes the test specified by <paramref name="predicate"/>; otherwise, the last element in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="predicate"/> is null.</exception> 
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Max(System.ReadOnlySpan{System.Byte})">
            <summary>
            Returns the maximum value in <paramref name="source"/>.
            </summary>
            <param name="source">A <see cref="T:System.ReadOnlySpan`1"/> to determine the maximum value of.</param>
            <returns>The maximum value in <paramref name="source"/>.</returns>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Max(System.ReadOnlySpan{System.UInt16})">
            <summary>
            Returns the maximum value in <paramref name="source"/>.
            </summary>
            <param name="source">A <see cref="T:System.ReadOnlySpan`1"/> to determine the maximum value of.</param>
            <returns>The maximum value in <paramref name="source"/>.</returns>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Max(System.ReadOnlySpan{System.UInt32})">
            <summary>
            Returns the maximum value in <paramref name="source"/>.
            </summary>
            <param name="source">A <see cref="T:System.ReadOnlySpan`1"/> to determine the maximum value of.</param>
            <returns>The maximum value in <paramref name="source"/>.</returns>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Max(System.ReadOnlySpan{System.UInt64})">
            <summary>
            Returns the maximum value in <paramref name="source"/>.
            </summary>
            <param name="source">A <see cref="T:System.ReadOnlySpan`1"/> to determine the maximum value of.</param>
            <returns>The maximum value in <paramref name="source"/>.</returns>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Max(System.ReadOnlySpan{System.SByte})">
            <summary>
            Returns the maximum value in <paramref name="source"/>.
            </summary>
            <param name="source">A <see cref="T:System.ReadOnlySpan`1"/> to determine the maximum value of.</param>
            <returns>The maximum value in <paramref name="source"/>.</returns>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Max(System.ReadOnlySpan{System.Int16})">
            <summary>
            Returns the maximum value in <paramref name="source"/>.
            </summary>
            <param name="source">A <see cref="T:System.ReadOnlySpan`1"/> to determine the maximum value of.</param>
            <returns>The maximum value in <paramref name="source"/>.</returns>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Max(System.ReadOnlySpan{System.Int32})">
            <summary>
            Returns the maximum value in <paramref name="source"/>.
            </summary>
            <param name="source">A <see cref="T:System.ReadOnlySpan`1"/> to determine the maximum value of.</param>
            <returns>The maximum value in <paramref name="source"/>.</returns>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Max(System.ReadOnlySpan{System.Int64})">
            <summary>
            Returns the maximum value in <paramref name="source"/>.
            </summary>
            <param name="source">A <see cref="T:System.ReadOnlySpan`1"/> to determine the maximum value of.</param>
            <returns>The maximum value in <paramref name="source"/>.</returns>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Max(System.ReadOnlySpan{System.Single})">
            <summary>
            Returns the maximum value in <paramref name="source"/>.
            </summary>
            <param name="source">A <see cref="T:System.ReadOnlySpan`1"/> to determine the maximum value of.</param>
            <returns>The maximum value in <paramref name="source"/>.</returns>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Max(System.ReadOnlySpan{System.Double})">
            <summary>
            Returns the maximum value in <paramref name="source"/>.
            </summary>
            <param name="source">A <see cref="T:System.ReadOnlySpan`1"/> to determine the maximum value of.</param>
            <returns>The maximum value in <paramref name="source"/>.</returns>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Max(System.ReadOnlySpan{System.Decimal})">
            <summary>
            Returns the maximum value in <paramref name="source"/>.
            </summary>
            <param name="source">A <see cref="T:System.ReadOnlySpan`1"/> to determine the maximum value of.</param>
            <returns>The maximum value in <paramref name="source"/>.</returns>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Max(System.ReadOnlySpan{System.Numerics.BigInteger})">
            <summary>
            Returns the maximum value in <paramref name="source"/>.
            </summary>
            <param name="source">A <see cref="T:System.ReadOnlySpan`1"/> to determine the maximum value of.</param>
            <returns>The maximum value in <paramref name="source"/>.</returns>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Max``1(System.ReadOnlySpan{``0},System.Func{``0,System.Byte})">
            <summary>
            Invokes a transform function on each element in <paramref name="source"/> and returns the maximum resulting value.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">A <see cref="T:System.ReadOnlySpan`1"/> to determine the maximum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The maximum value in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Max``1(System.ReadOnlySpan{``0},System.Func{``0,System.UInt16})">
            <summary>
            Invokes a transform function on each element of a generic sequence and returns the maximum resulting value.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">A <see cref="T:System.ReadOnlySpan`1"/> to determine the maximum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The maximum value in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Max``1(System.ReadOnlySpan{``0},System.Func{``0,System.UInt32})">
            <summary>
            Invokes a transform function on each element in <paramref name="source"/> and returns the maximum resulting value.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">A <see cref="T:System.ReadOnlySpan`1"/> to determine the maximum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The maximum value in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Max``1(System.ReadOnlySpan{``0},System.Func{``0,System.UInt64})">
            <summary>
            Invokes a transform function on each element in <paramref name="source"/> and returns the maximum resulting value.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">A <see cref="T:System.ReadOnlySpan`1"/> to determine the maximum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The maximum value in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Max``1(System.ReadOnlySpan{``0},System.Func{``0,System.SByte})">
            <summary>
            Invokes a transform function on each element in <paramref name="source"/> and returns the maximum resulting value.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">A <see cref="T:System.ReadOnlySpan`1"/> to determine the maximum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The maximum value in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Max``1(System.ReadOnlySpan{``0},System.Func{``0,System.Int16})">
            <summary>
            Invokes a transform function on each element in <paramref name="source"/> and returns the maximum resulting value.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">A <see cref="T:System.ReadOnlySpan`1"/> to determine the maximum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The maximum value in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Max``1(System.ReadOnlySpan{``0},System.Func{``0,System.Int32})">
            <summary>
            Invokes a transform function on each element in <paramref name="source"/> and returns the maximum resulting value.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">A <see cref="T:System.ReadOnlySpan`1"/> to determine the maximum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The maximum value in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Max``1(System.ReadOnlySpan{``0},System.Func{``0,System.Int64})">
            <summary>
            Invokes a transform function on each element in <paramref name="source"/> and returns the maximum resulting value.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">A <see cref="T:System.ReadOnlySpan`1"/> to determine the maximum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The maximum value in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Max``1(System.ReadOnlySpan{``0},System.Func{``0,System.Single})">
            <summary>
            Invokes a transform function on each element in <paramref name="source"/> and returns the maximum resulting value.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam> 
            <param name="source">A <see cref="T:System.ReadOnlySpan`1"/> to determine the maximum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The maximum value in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Max``1(System.ReadOnlySpan{``0},System.Func{``0,System.Double})">
            <summary>
            Invokes a transform function on each element in <paramref name="source"/> and returns the maximum resulting value.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam> 
            <param name="source">A <see cref="T:System.ReadOnlySpan`1"/> to determine the maximum value of.</param>    
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The maximum value in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Max``1(System.ReadOnlySpan{``0},System.Func{``0,System.Decimal})">
            <summary>
            Invokes a transform function on each element in <paramref name="source"/> and returns the maximum resulting value.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam> 
            <param name="source">A <see cref="T:System.ReadOnlySpan`1"/> to determine the maximum value of.</param>    
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The maximum value in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Max``1(System.ReadOnlySpan{``0},System.Func{``0,System.Numerics.BigInteger})">
            <summary>
            Invokes a transform function on each element in <paramref name="source"/> and returns the maximum resulting value.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam> 
            <param name="source">A <see cref="T:System.ReadOnlySpan`1"/> to determine the maximum value of.</param>    
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The maximum value in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.MaxBy``2(System.ReadOnlySpan{``0},System.Func{``0,``1})">
            <summary>
            Returns the maximum value in a generic sequence according to a specified key selector function.
            </summary>
            <typeparam name="TSource">The type of elements in <paramref name="source"/>.</typeparam>
            <typeparam name="TKey">The type of key to compare elements by.</typeparam>
            <param name="source">A <see cref="T:System.ReadOnlySpan`1"/> to determine the maximum value of.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <returns>The value with the maximum key in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="keySelector"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException"><typeparamref name="TSource"/> is a primitive type and <paramref name="source"/> is empty.</exception>
            <remarks>If <paramref name="source"/> is empty and <typeparamref name="TSource"/> is a non-nullable struct, such as a primitive type, an <see cref="T:System.InvalidOperationException"/> is thrown.</remarks>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.MaxBy``2(System.ReadOnlySpan{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Returns the maximum value in a generic sequence according to a specified key selector function.
            </summary>
            <typeparam name="TSource">The type of elements in <paramref name="source"/>.</typeparam>
            <typeparam name="TKey">The type of key to compare elements by.</typeparam>
            <param name="source">A <see cref="T:System.ReadOnlySpan`1"/> to determine the maximum value of.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> to compare keys.</param>
            <returns>The value with the maximum key in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="keySelector"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException"><typeparamref name="TSource"/> is a primitive type and <paramref name="source"/> is empty.</exception>
            <remarks>If <paramref name="source"/> is empty and <typeparamref name="TSource"/> is a non-nullable struct, such as a primitive type, an <see cref="T:System.InvalidOperationException"/> is thrown.</remarks>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Min(System.ReadOnlySpan{System.Byte})">
            <summary>
            Returns the minimum value in <paramref name="source"/>.
            </summary>
            <param name="source">A <see cref="T:System.ReadOnlySpan`1"/> to determine the minimum value of.</param>
            <returns>The minimum value in <paramref name="source"/>.</returns>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Min(System.ReadOnlySpan{System.UInt16})">
            <summary>
            Returns the minimum value in <paramref name="source"/>.
            </summary>
            <param name="source">A <see cref="T:System.ReadOnlySpan`1"/> to determine the minimum value of.</param>
            <returns>The minimum value in <paramref name="source"/>.</returns>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Min(System.ReadOnlySpan{System.UInt32})">
            <summary>
            Returns the minimum value in <paramref name="source"/>.
            </summary>
            <param name="source">A <see cref="T:System.ReadOnlySpan`1"/> to determine the minimum value of.</param>
            <returns>The minimum value in <paramref name="source"/>.</returns>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Min(System.ReadOnlySpan{System.UInt64})">
            <summary>
            Returns the minimum value in <paramref name="source"/>.
            </summary>
            <param name="source">A <see cref="T:System.ReadOnlySpan`1"/> to determine the minimum value of.</param>
            <returns>The minimum value in <paramref name="source"/>.</returns>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Min(System.ReadOnlySpan{System.SByte})">
            <summary>
            Returns the minimum value in <paramref name="source"/>.
            </summary>
            <param name="source">A <see cref="T:System.ReadOnlySpan`1"/> to determine the minimum value of.</param>
            <returns>The minimum value in <paramref name="source"/>.</returns>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Min(System.ReadOnlySpan{System.Int16})">
            <summary>
            Returns the minimum value in <paramref name="source"/>.
            </summary>
            <param name="source">A <see cref="T:System.ReadOnlySpan`1"/> to determine the minimum value of.</param>
            <returns>The minimum value in <paramref name="source"/>.</returns>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Min(System.ReadOnlySpan{System.Int32})">
            <summary>
            Returns the minimum value in <paramref name="source"/>.
            </summary>
            <param name="source">A <see cref="T:System.ReadOnlySpan`1"/> to determine the minimum value of.</param>
            <returns>The minimum value in <paramref name="source"/>.</returns>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Min(System.ReadOnlySpan{System.Int64})">
            <summary>
            Returns the minimum value in <paramref name="source"/>.
            </summary>
            <param name="source">A <see cref="T:System.ReadOnlySpan`1"/> to determine the minimum value of.</param>
            <returns>The minimum value in <paramref name="source"/>.</returns>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Min(System.ReadOnlySpan{System.Single})">
            <summary>
            Returns the minimum value in <paramref name="source"/>.
            </summary>
            <param name="source">A <see cref="T:System.ReadOnlySpan`1"/> to determine the minimum value of.</param>
            <returns>The minimum value in <paramref name="source"/>.</returns>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Min(System.ReadOnlySpan{System.Double})">
            <summary>
            Returns the minimum value in <paramref name="source"/>.
            </summary>
            <param name="source">A <see cref="T:System.ReadOnlySpan`1"/> to determine the minimum value of.</param>
            <returns>The minimum value in <paramref name="source"/>.</returns>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Min(System.ReadOnlySpan{System.Decimal})">
            <summary>
            Returns the minimum value in <paramref name="source"/>.
            </summary>
            <param name="source">A <see cref="T:System.ReadOnlySpan`1"/> to determine the minimum value of.</param>
            <returns>The minimum value in <paramref name="source"/>.</returns>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Min(System.ReadOnlySpan{System.Numerics.BigInteger})">
            <summary>
            Returns the minimum value in <paramref name="source"/>.
            </summary>
            <param name="source">A <see cref="T:System.ReadOnlySpan`1"/> to determine the minimum value of.</param>
            <returns>The minimum value in <paramref name="source"/>.</returns>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Min``1(System.ReadOnlySpan{``0},System.Func{``0,System.Byte})">
            <summary>
            Invokes a transform function on each element in <paramref name="source"/> and returns the minimum resulting value.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">A <see cref="T:System.ReadOnlySpan`1"/> to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The minimum value in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Min``1(System.ReadOnlySpan{``0},System.Func{``0,System.UInt16})">
            <summary>
            Invokes a transform function on each element in <paramref name="source"/> and returns the minimum resulting value.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">A <see cref="T:System.ReadOnlySpan`1"/> to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The minimum value in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Min``1(System.ReadOnlySpan{``0},System.Func{``0,System.UInt32})">
            <summary>
            Invokes a transform function on each element in <paramref name="source"/> and returns the minimum resulting value.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">A <see cref="T:System.ReadOnlySpan`1"/> to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The minimum value in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Min``1(System.ReadOnlySpan{``0},System.Func{``0,System.UInt64})">
            <summary>
            Invokes a transform function on each element in <paramref name="source"/> and returns the minimum resulting value.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">A <see cref="T:System.ReadOnlySpan`1"/> to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The minimum value in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Min``1(System.ReadOnlySpan{``0},System.Func{``0,System.SByte})">
            <summary>
            Invokes a transform function on each element in <paramref name="source"/> and returns the minimum resulting value.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">A <see cref="T:System.ReadOnlySpan`1"/> to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The minimum value in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Min``1(System.ReadOnlySpan{``0},System.Func{``0,System.Int16})">
            <summary>
            Invokes a transform function on each element in <paramref name="source"/> and returns the minimum resulting value.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">A <see cref="T:System.ReadOnlySpan`1"/> to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The minimum value in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Min``1(System.ReadOnlySpan{``0},System.Func{``0,System.Int32})">
            <summary>
            Invokes a transform function on each element in <paramref name="source"/> and returns the minimum resulting value.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">A <see cref="T:System.ReadOnlySpan`1"/> to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The minimum value in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Min``1(System.ReadOnlySpan{``0},System.Func{``0,System.Int64})">
            <summary>
            Invokes a transform function on each element in <paramref name="source"/> and returns the minimum resulting value.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">A <see cref="T:System.ReadOnlySpan`1"/> to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The minimum value in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Min``1(System.ReadOnlySpan{``0},System.Func{``0,System.Single})">
            <summary>
            Invokes a transform function on each element in <paramref name="source"/> and returns the minimum resulting value.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">A <see cref="T:System.ReadOnlySpan`1"/> to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The minimum value in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Min``1(System.ReadOnlySpan{``0},System.Func{``0,System.Double})">
            <summary>
            Invokes a transform function on each element in <paramref name="source"/> and returns the minimum resulting value.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">A <see cref="T:System.ReadOnlySpan`1"/> to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The minimum value in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Min``1(System.ReadOnlySpan{``0},System.Func{``0,System.Decimal})">
            <summary>
            Invokes a transform function on each element in <paramref name="source"/> and returns the minimum resulting value.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">A <see cref="T:System.ReadOnlySpan`1"/> to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The minimum value in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Min``1(System.ReadOnlySpan{``0},System.Func{``0,System.Numerics.BigInteger})">
            <summary>
            Invokes a transform function on each element in <paramref name="source"/> and returns the minimum resulting value.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">A <see cref="T:System.ReadOnlySpan`1"/> to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The minimum value in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.MinBy``2(System.ReadOnlySpan{``0},System.Func{``0,``1})">
            <summary>
            Returns the minimum value in a generic sequence according to a specified key selector function.
            </summary>
            <typeparam name="TSource">The type of elements in <paramref name="source"/>.</typeparam>
            <typeparam name="TKey">The type of key to compare elements by.</typeparam>
            <param name="source">A <see cref="T:System.ReadOnlySpan`1"/> to determine the minimum value of.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <returns>The value with the minimum key in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="keySelector"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException"><typeparamref name="TSource"/> is a primitive type and <paramref name="source"/> is empty.</exception>
            <remarks>If <paramref name="source"/> is empty and <typeparamref name="TSource"/> is a non-nullable struct, such as a primitive type, an <see cref="T:System.InvalidOperationException"/> is thrown.</remarks>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.MinBy``2(System.ReadOnlySpan{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Returns the minimum value in a generic sequence according to a specified key selector function.
            </summary>
            <typeparam name="TSource">The type of elements in <paramref name="source"/>.</typeparam>
            <typeparam name="TKey">The type of key to compare elements by.</typeparam>
            <param name="source">A <see cref="T:System.ReadOnlySpan`1"/> to determine the minimum value of.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> to compare keys.</param>
            <returns>The value with the minimum key in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="keySelector"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException"><typeparamref name="TSource"/> is a primitive type and <paramref name="source"/> is empty.</exception>
            <remarks>If <paramref name="source"/> is empty and <typeparamref name="TSource"/> is a non-nullable struct, such as a primitive type, an <see cref="T:System.InvalidOperationException"/> is thrown.</remarks>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Single``1(System.ReadOnlySpan{``0})">
            <summary>
            Returns the only element in <see cref="T:System.ReadOnlySpan`1"/>, and throws an exception if there is not exactly one element in the <see cref="T:System.ReadOnlySpan`1"/>.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to return the single element of.</param>
            <returns>The single element in <paramref name="source"/>.</returns>
            <exception cref="T:System.InvalidOperationException"><paramref name="source"/> contains more than one element -or- <paramref name="source"/> is empty.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Single``1(System.ReadOnlySpan{``0},System.Predicate{``0})">
            <summary>
            Returns the only element in <see cref="T:System.ReadOnlySpan`1"/> that satisfies a specified condition, and throws an exception if more than one such element exists.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to return the single element of.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>The single element in <paramref name="source"/> that satisfies a condition.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="predicate"/> is null.</exception> 
            <exception cref="T:System.InvalidOperationException">No element satisfies the condition in <paramref name="predicate"/>. -or- More than one element satisfies the condition in <paramref name="predicate"/>. -or- <paramref name="source"/> is empty.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.SingleOrDefault``1(System.ReadOnlySpan{``0},``0)">
            <summary>
            Returns the only element in <see cref="T:System.ReadOnlySpan`1"/>, and throws an exception if there is not exactly one element in the <see cref="T:System.ReadOnlySpan`1"/>.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to return the single element of.</param>
            /// <param name="defaultValue">The default value to return if <paramref name="source"/> is empty.</param>
            <returns>The single element in <paramref name="source"/>.</returns>
            <exception cref="T:System.InvalidOperationException"><paramref name="source"/> contains more than one element -or- <paramref name="source"/> is empty.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.SingleOrDefault``1(System.ReadOnlySpan{``0},System.Predicate{``0},``0)">
            <summary>
            Returns the first element in a <see cref="T:System.ReadOnlySpan`1"/> that satisfies a specified condition or a specified default value if no such element is found.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to return the first element of.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="defaultValue">The default value to return if <paramref name="source"/> is empty.</param>
            <returns>default(T) if <paramref name="source"/> is empty or if no element passes the test specified by <paramref name="predicate"/>; otherwise, the first element in <paramref name="source"/> that passes the test specified by <paramref name="predicate"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="predicate"/> is null.</exception> 
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.SingleOrDefault``1(System.ReadOnlySpan{``0})">
            <summary>
            Returns the only element in <see cref="T:System.ReadOnlySpan`1"/>, and throws an exception if there is not exactly one element in the <see cref="T:System.ReadOnlySpan`1"/>.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to return the single element of.</param>
            <returns>The single element in <paramref name="source"/>.</returns>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.SingleOrDefault``1(System.ReadOnlySpan{``0},System.Predicate{``0})">
            <summary>
            Returns the only element in <see cref="T:System.ReadOnlySpan`1"/> that satisfies a specified condition, and throws an exception if more than one such element exists.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to return the single element of.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>The single element in <paramref name="source"/> that satisfies a condition.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="predicate"/> is null.</exception> 
            <exception cref="T:System.InvalidOperationException">No element satisfies the condition in <paramref name="predicate"/>. -or- More than one element satisfies the condition in <paramref name="predicate"/>. -or- <paramref name="source"/> is empty.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Skip``1(System.ReadOnlySpan{``0},System.Int32)">
            <summary>
            Bypasses a specified number of elements in <paramref name="source"/> and then returns the remaining elements.
            </summary>
            <typeparam name="T">The type of elements in the <see cref="T:System.ReadOnlySpan`1"/>.</typeparam>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to operate on.</param>
            <param name="count">The Number of elements to bypass.</param>
            <returns>A <see cref="T:System.ReadOnlySpan`1"/> that contains the elements that occur after <paramref name="count"/> elements have been bypassed in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.SkipLast``1(System.ReadOnlySpan{``0},System.Int32)">
            <summary>
            Returns a new <see cref="T:System.ReadOnlySpan`1"/> that contains the elements from source with the last <paramref name="count"/> elements of the source collection omitted.
            </summary>
            <typeparam name="T">The type of elements in the <see cref="T:System.ReadOnlySpan`1"/>.</typeparam>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to operate on.</param>
            <param name="count">The number of elements to omit from the end of <paramref name="source"/>.</param>
            <returns>A new <see cref="T:System.ReadOnlySpan`1"/> that contains the elements from <paramref name="source"/> minus <paramref name="count"/> elements from the end of the collection.</returns>
            <remarks>If <paramref name="count"/> is not a positive number, this method returns <see cref="P:System.ReadOnlySpan`1.Empty"/>.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.SkipWhile``1(System.ReadOnlySpan{``0},System.Predicate{``0})">
            <summary>
            Bypasses elements in <paramref name="source"/> as long as a <paramref name="condition"/> is true and then returns the remaining elements. The element's index is used in the logic of the predicate function.
            </summary>
            <typeparam name="T">The type of elements in the <see cref="T:System.ReadOnlySpan`1"/>.</typeparam>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to operate on.</param>
            <param name="condition">A function to test each element for a condition.</param>
            <returns>A <see cref="T:System.ReadOnlySpan`1"/> that contains the elements from <paramref name="source"/> starting at the first element in the linear series that does not pass the specified <paramref name="condition" />.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="condition"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Sum(System.ReadOnlySpan{System.Byte})">
            <summary>
            Computes the Sum of all the elements in <paramref name="source"/>.
            </summary>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to operate on.</param>
            <returns>The Sum of all the elements in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Sum(System.ReadOnlySpan{System.UInt16})">
            <summary>
            Computes the Sum of all the elements in <paramref name="source"/>.
            </summary>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to operate on.</param>
            <returns>The Sum of all the elements in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Sum(System.ReadOnlySpan{System.UInt32})">
            <summary>
            Computes the Sum of all the elements in <paramref name="source"/>.
            </summary>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to operate on.</param>
            <returns>The Sum of all the elements in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Sum(System.ReadOnlySpan{System.UInt64})">
            <summary>
            Computes the Sum of all the elements in <paramref name="source"/>.
            </summary>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to operate on.</param>
            <returns>The Sum of all the elements in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Sum(System.ReadOnlySpan{System.SByte})">
            <summary>
            Computes the Sum of all the elements in <paramref name="source"/>.
            </summary>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to operate on.</param>
            <returns>The Sum of all the elements in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Sum(System.ReadOnlySpan{System.Int16})">
            <summary>
            Computes the Sum of all the elements in <paramref name="source"/>.
            </summary>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to operate on.</param>
            <returns>The Sum of all the elements in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Sum(System.ReadOnlySpan{System.Int32})">
            <summary>
            Computes the Sum of all the elements in <paramref name="source"/>.
            </summary>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to operate on.</param>
            <returns>The Sum of all the elements in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Sum(System.ReadOnlySpan{System.Int64})">
            <summary>
            Computes the Sum of all the elements in <paramref name="source"/>.
            </summary>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to operate on.</param>
            <returns>The Sum of all the elements in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Sum(System.ReadOnlySpan{System.Single})">
            <summary>
            Computes the Sum of all the elements in <paramref name="source"/>.
            </summary>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to operate on.</param>
            <returns>The Sum of all the elements in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Sum(System.ReadOnlySpan{System.Double})">
            <summary>
            Computes the Sum of all the elements in <paramref name="source"/>.
            </summary>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to operate on.</param>
            <returns>The Sum of all the elements in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Sum(System.ReadOnlySpan{System.Decimal})">
            <summary>
            Computes the Sum of all the elements in <paramref name="source"/>.
            </summary>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to operate on.</param>
            <returns>The Sum of all the elements in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Sum(System.ReadOnlySpan{System.Numerics.BigInteger})">
            <summary>
            Computes the Sum of all the elements in <paramref name="source"/>.
            </summary>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to operate on.</param>
            <returns>The Sum of all the elements in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Take``1(System.ReadOnlySpan{``0},System.Int32)">
            <summary>
            Returns a specified number of contiguous elements from the start of a <see cref="T:System.ReadOnlySpan`1"/>.
            </summary>
            <typeparam name="T">The type of elements in the <see cref="T:System.ReadOnlySpan`1"/>.</typeparam>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to operate on.</param>
            <param name="count">The Number of elements to take.</param>
            <returns>A <see cref="T:System.ReadOnlySpan`1"/> that contains <paramref name="count"/> elements from the start of <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.TakeLast``1(System.ReadOnlySpan{``0},System.Int32)">
            <summary>
            Returns a new <see cref="T:System.ReadOnlySpan`1"/> that contains the last <paramref name="count"/> elements from <paramref name="source"/>.
            </summary>
            <typeparam name="T">The type of elements in the <see cref="T:System.ReadOnlySpan`1"/>.</typeparam>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to operate on.</param>
            <param name="count">The number of elements to take from the end of <paramref name="source"/>.</param>
            <returns>A new <see cref="T:System.ReadOnlySpan`1"/> that contains the last <paramref name="count"/> elements from <paramref name="source"/>.</returns>
            <remarks>If <paramref name="count"/> is not a positive number, this method returns <see cref="P:System.ReadOnlySpan`1.Empty"/>.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.TakeWhile``1(System.ReadOnlySpan{``0},System.Predicate{``0})">
             <summary>
            Returns elements from <paramref name="source"/> as long as a specified <paramref name="condition"/> is true, and then skips the remaining elements.
            </summary>
            <typeparam name="T">The type of elements in the <see cref="T:System.ReadOnlySpan`1"/>.</typeparam>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to operate on.</param>
            <param name="condition">A function to test each element for a condition.</param>
            <returns>A <see cref="T:System.ReadOnlySpan`1"/> that contains elements from <paramref name="source"/> that occur before the element at which the <paramref name="condition"/> no longer passes.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="condition"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Remove``1(System.ReadOnlySpan{``0},System.Int32)">
            <summary>
            Returns a new <see cref="T:System.ReadOnlySpan`1"/> in which all the characters in the current instance, beginning at <paramref name="startIndex"/> and continuing through the last position, have been deleted.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to operate on.</param>
            <param name="startIndex">The zero-based position to begin deleting characters.</param>
            <returns>A new <see cref="T:System.ReadOnlySpan`1"/> that is equivalent to <paramref name="source"/> except for thse removed characters.</returns>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Split``1(System.ReadOnlySpan{``0},``0)">
            <summary>
            Splits a <see cref="T:System.ReadOnlySpan`1"/> into multiple ReadOnlySpans based on the specified <paramref name="delimiter"/>.
            </summary>
            <typeparam name="T">The type of elements in the <see cref="T:System.ReadOnlySpan`1"/>.</typeparam>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to be split.</param>
            <param name="delimiter">An instance of <typeparamref name="T"/> that delimits the various sub-ReadOnlySpans in <paramref name="source"/>.</param>
            <returns>An instance of the ref struct <see cref="T:SpanExtensions.Enumerators.SpanSplitEnumerator`1"/>, which works the same way as every <see cref="T:System.Collections.IEnumerator"/> does and can be used in a foreach construct.</returns>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Split``1(System.ReadOnlySpan{``0},``0,System.Int32,SpanExtensions.CountExceedingBehaviour)">
            <summary>
            Splits a <see cref="T:System.ReadOnlySpan`1"/> into at most <paramref name="count"/> ReadOnlySpans based on the specified <paramref name="delimiter"/>.
            </summary>
            <typeparam name="T">The type of elements in the <see cref="T:System.ReadOnlySpan`1"/>.</typeparam>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to be split.</param>
            <param name="delimiter">An instance of <typeparamref name="T"/> that delimits the various sub-ReadOnlySpans in <paramref name="source"/>.</param>
            <param name="count">The maximum number of sub-ReadOnlySpans to split into.</param>
            <param name="countExceedingBehaviour">The handling of the instances more than count.</param>
            <returns>An instance of the ref struct <see cref="T:SpanExtensions.Enumerators.SpanSplitWithCountEnumerator`1"/>, which works the same way as every <see cref="T:System.Collections.IEnumerator"/> does and can be used in a foreach construct.</returns>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Split(System.ReadOnlySpan{System.Char},System.Char,System.StringSplitOptions)">
            <summary>
            Splits a <see cref="T:System.ReadOnlySpan`1"/> into multiple ReadOnlySpans based on the specified <paramref name="delimiter"/> and the specified <paramref name="options"/>.
            </summary>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to be split.</param>
            <param name="delimiter">A <see cref="T:System.Char"/> that delimits the various sub-ReadOnlySpans in <paramref name="source"/>.</param>
            <param name="options">A bitwise combination of the enumeration values that specifies whether to trim results and include empty results.</param>
            <returns>An instance of the ref struct <see cref="T:SpanExtensions.Enumerators.SpanSplitStringSplitOptionsEnumerator"/>, which works the same way as every <see cref="T:System.Collections.IEnumerator"/> does and can be used in a foreach construct.</returns>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Split(System.ReadOnlySpan{System.Char},System.Char,System.Int32,System.StringSplitOptions,SpanExtensions.CountExceedingBehaviour)">
            <summary>
            Splits a <see cref="T:System.ReadOnlySpan`1"/> into at most <paramref name="count"/> ReadOnlySpans based on the specified <paramref name="delimiter"/> and the specified <paramref name="options"/>.
            </summary>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to be split.</param>
            <param name="delimiter">A <see cref="T:System.Char"/> that delimits the various sub-ReadOnlySpans in <paramref name="source"/>.</param>
            <param name="count">The maximum number of sub-ReadOnlySpans to split into.</param>
            <param name="options">A bitwise combination of the enumeration values that specifies whether to trim results and include empty results.</param>
            <param name="countExceedingBehaviour">The handling of the instances more than count.</param>
            <returns>An instance of the ref struct <see cref="T:SpanExtensions.Enumerators.SpanSplitAnyStringSplitOptionsWithCountEnumerator"/>, which works the same way as every <see cref="T:System.Collections.IEnumerator"/> does and can be used in a foreach construct.</returns>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.SplitAny``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
            <summary>
            Splits a <see cref="T:System.ReadOnlySpan`1"/> into multiple ReadOnlySpans based on the any of the specified <paramref name="delimiters"/>.
            </summary>
            <typeparam name="T">The type of elements in the <see cref="T:System.ReadOnlySpan`1"/>.</typeparam>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to be split.</param>
            <param name="delimiters">A <see cref="T:System.ReadOnlySpan`1"/> with the instances of <typeparamref name="T"/> that delimit the various sub-ReadOnlySpans in <paramref name="source"/>.</param>
            <returns>An instance of the ref struct <see cref="T:SpanExtensions.Enumerators.SpanSplitAnyEnumerator`1"/>, which works the same way as every <see cref="T:System.Collections.IEnumerator"/> does and can be used in a foreach construct.</returns>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.SplitAny``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},System.Int32,SpanExtensions.CountExceedingBehaviour)">
            <summary>
            Splits a <see cref="T:System.ReadOnlySpan`1"/> into at most <paramref name="count"/> ReadOnlySpans based on the any of the specified  <paramref name="delimiters"/>.
            </summary>
            <typeparam name="T">The type of elements in the <see cref="T:System.ReadOnlySpan`1"/>.</typeparam>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to be split.</param>
            <param name="delimiters">A <see cref="T:System.ReadOnlySpan`1"/> with the instances of <typeparamref name="T"/> that delimit the various sub-ReadOnlySpans in <paramref name="source"/>.</param>
            <param name="count">The maximum number of sub-ReadOnlySpans to split into.</param>
            <param name="countExceedingBehaviour">The handling of the instances more than count.</param>
            <returns>An instance of the ref struct <see cref="T:SpanExtensions.Enumerators.SpanSplitAnyWithCountEnumerator`1"/>, which works the same way as every <see cref="T:System.Collections.IEnumerator"/> does and can be used in a foreach construct.</returns>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.SplitAny(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringSplitOptions)">
            <summary>
            Splits a <see cref="T:System.ReadOnlySpan`1"/> into multiple ReadOnlySpans based on the any of the specified <paramref name="delimiters"/>.
            </summary>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to be split.</param>
            <param name="delimiters">A <see cref="T:System.ReadOnlySpan`1"/>, that delimit the various sub-ReadOnlySpans in <paramref name="source"/>.</param>
            <param name="options">A bitwise combination of the enumeration values that specifies whether to trim results and include empty results.</param>
            <returns>An instance of the ref struct <see cref="T:SpanExtensions.Enumerators.SpanSplitAnyStringSplitOptionsEnumerator"/>, which works the same way as every <see cref="T:System.Collections.IEnumerator"/> does and can be used in a foreach construct.</returns>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.SplitAny(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Int32,System.StringSplitOptions,SpanExtensions.CountExceedingBehaviour)">
            <summary>
            Splits a <see cref="T:System.ReadOnlySpan`1"/> into at most <paramref name="count"/> ReadOnlySpans based on the any of the specified <paramref name="delimiters"/>.
            </summary>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to be split.</param>
            <param name="delimiters">A <see cref="T:System.ReadOnlySpan`1"/>, that delimit the various sub-ReadOnlySpans in <paramref name="source"/>.</param>
            <param name="count">The maximum number of sub-ReadOnlySpans to split into.</param>
            <param name="options">A bitwise combination of the enumeration values that specifies whether to trim results and include empty results.</param>
            <param name="countExceedingBehaviour">The handling of the instances more than count.</param>
            <returns>An instance of the ref struct <see cref="T:SpanExtensions.Enumerators.SpanSplitAnyStringSplitOptionsWithCountEnumerator"/>, which works the same way as every <see cref="T:System.Collections.IEnumerator"/> does and can be used in a foreach construct.</returns>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Split``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
            <summary>
            Splits a <see cref="T:System.ReadOnlySpan`1"/> into multiple ReadOnlySpans based on the specified <paramref name="delimiter"/>.
            </summary>
            <typeparam name="T">The type of elements in the <see cref="T:System.ReadOnlySpan`1"/>.</typeparam>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to be split.</param>
            <param name="delimiter">An instance of <see cref="T:System.ReadOnlySpan`1"/> that delimits the various sub-ReadOnlySpans in <paramref name="source"/>.</param>
            <returns>An instance of the ref struct <see cref="T:SpanExtensions.Enumerators.SpanSplitSequenceEnumerator`1"/>, which works the same way as every <see cref="T:System.Collections.IEnumerator"/> does and can be used in a foreach construct.</returns>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Split``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},System.Int32,SpanExtensions.CountExceedingBehaviour)">
            <summary>
            Splits a <see cref="T:System.ReadOnlySpan`1"/> into at most <paramref name="count"/> ReadOnlySpans based on the specified <paramref name="delimiter"/>.
            </summary>
            <typeparam name="T">The type of elements in the <see cref="T:System.ReadOnlySpan`1"/>.</typeparam>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to be split.</param>
            <param name="delimiter">An instance of <see cref="T:System.ReadOnlySpan`1"/> that delimits the various sub-ReadOnlySpans in <paramref name="source"/>.</param>
            <param name="count">The maximum number of sub-ReadOnlySpans to split into.</param>
            <param name="countExceedingBehaviour">The handling of the instances more than count.</param>
            <returns>An instance of the ref struct , which works the same way as every <see cref="T:System.Collections.IEnumerator"/> does and can be used in a foreach construct.</returns>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Split(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringSplitOptions)">
            <summary>
            Splits a <see cref="T:System.ReadOnlySpan`1"/> into multiple ReadOnlySpans based on the specified <paramref name="delimiter"/>.
            </summary>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to be split.</param>
            <param name="delimiter">An instance of <see cref="T:System.ReadOnlySpan`1"/> that delimits the various sub-ReadOnlySpans in <paramref name="source"/>.</param>
            <param name="options">A bitwise combination of the enumeration values that specifies whether to trim results and include empty results.</param>
            <returns>An instance of the ref struct <see cref="T:SpanExtensions.Enumerators.SpanSplitSequenceStringSplitOptionsEnumerator"/>, which works the same way as every <see cref="T:System.Collections.IEnumerator"/> does and can be used in a foreach construct.</returns>
        </member>
        <member name="M:SpanExtensions.ReadOnlySpanExtensions.Split(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Int32,System.StringSplitOptions,SpanExtensions.CountExceedingBehaviour)">
            <summary>
            Splits a <see cref="T:System.ReadOnlySpan`1"/> into at most <paramref name="count"/> ReadOnlySpans based on the specified <paramref name="delimiter"/>.
            </summary>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to be split.</param>
            <param name="delimiter">An instance of <see cref="T:System.ReadOnlySpan`1"/> that delimits the various sub-ReadOnlySpans in <paramref name="source"/>.</param>
            <param name="count">The maximum number of sub-ReadOnlySpans to split into.</param>
            <param name="options">A bitwise combination of the enumeration values that specifies whether to trim results and include empty results.</param>
            <param name="countExceedingBehaviour">The handling of the instances more than count.</param>
            <returns>An instance of the ref struct <see cref="T:SpanExtensions.Enumerators.SpanSplitSequenceStringSplitOptionsWithCountEnumerator"/>, which works the same way as every <see cref="T:System.Collections.IEnumerator"/> does and can be used in a foreach construct.</returns>
        </member>
        <member name="T:SpanExtensions.SpanExtensions">
            <summary>
            Extension Methods for <see cref="T:System.Span`1"/>.
            </summary>
            <summary>
            Extension Methods for <see cref="T:System.Span`1"/>.
            </summary>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.All``1(System.Span{``0},System.Predicate{``0})">
            <summary>
            Determines whether all elements in <paramref name="source"/> satisfy a condition.
            </summary>
            <typeparam name="T">The type of elements in the <see cref="T:System.Span`1"/>.</typeparam>
            <param name="source">The <see cref="T:System.Span`1"/> to operate on.</param>
            <param name="predicate">The Condition to be satisfied.</param>
            <returns>A <see cref="T:System.Boolean"/> indicating whether or not every element in <paramref name="source"/> satisified the condition.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="predicate"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Any``1(System.Span{``0},System.Predicate{``0})">
            <summary>
            Determines whether any element in <paramref name="source"/> satisfies a condition. 
            </summary>
            <typeparam name="T">The type of elements in the <see cref="T:System.Span`1"/>.</typeparam>
            <param name="source">The <see cref="T:System.Span`1"/> to operate on.</param>
            <param name="predicate">The Condition to be satisfied.</param>
            <returns>A <see cref="T:System.Boolean"/> indicating whether or not any elements satisified the condition.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="predicate"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Average(System.Span{System.Byte})">
            <summary>
            Computes the Average of all the values in <paramref name="source"/>.
            </summary>
            <param name="source">The <see cref="T:System.Span`1"/> to operate on.</param>
            <returns>The Average of all the values in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Average(System.Span{System.UInt16})">
            <summary>
            Computes the Average of all the values in <paramref name="source"/>.
            </summary>
            <param name="source">The <see cref="T:System.Span`1"/> to operate on.</param>
            <returns>The Average of all the values in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Average(System.Span{System.UInt32})">
            <summary>
            Computes the Average of all the values in <paramref name="source"/>.
            </summary>
            <param name="source">The <see cref="T:System.Span`1"/> to operate on.</param>
            <returns>The Average of all the values in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Average(System.Span{System.UInt64})">
            <summary>
            Computes the Average of all the values in <paramref name="source"/>.
            </summary>
            <param name="source">The <see cref="T:System.Span`1"/> to operate on.</param>
            <returns>The Average of all the values in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Average(System.Span{System.SByte})">
            <summary>
            Computes the Average of all the values in <paramref name="source"/>.
            </summary>
            <param name="source">The <see cref="T:System.Span`1"/> to operate on.</param>
            <returns>The Average of all the values in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Average(System.Span{System.Int16})">
            <summary>
            Computes the Average of all the values in <paramref name="source"/>.
            </summary>
            <param name="source">The <see cref="T:System.Span`1"/> to operate on.</param>
            <returns>The Average of all the values in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Average(System.Span{System.Int32})">
            <summary>
            Computes the Average of all the values in <paramref name="source"/>.
            </summary>
            <param name="source">The <see cref="T:System.Span`1"/> to operate on.</param>
            <returns>The Average of all the values in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Average(System.Span{System.Int64})">
            <summary>
            Computes the Average of all the values in <paramref name="source"/>.
            </summary>
            <param name="source">The <see cref="T:System.Span`1"/> to operate on.</param>
            <returns>The Average of all the values in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Average(System.Span{System.Single})">
            <summary>
            Computes the Average of all the values in <paramref name="source"/>.
            </summary>
            <param name="source">The <see cref="T:System.Span`1"/> to operate on.</param>
            <returns>The Average of all the values in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Average(System.Span{System.Double})">
            <summary>
            Computes the Average of all the values in <paramref name="source"/>.
            </summary>
            <param name="source">The <see cref="T:System.Span`1"/> to operate on.</param>
            <returns>The Average of all the values in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Average(System.Span{System.Decimal})">
            <summary>
            Computes the Average of all the values in <paramref name="source"/>.
            </summary>
            <param name="source">The <see cref="T:System.Span`1"/> to operate on.</param>
            <returns>The Average of all the values in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Average(System.Span{System.Numerics.BigInteger})">
            <summary>
            Computes the Average of all the values in <paramref name="source"/>.
            </summary>
            <param name="source">The <see cref="T:System.Span`1"/> to operate on.</param>
            <returns>The Average of all the values in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Count``1(System.Span{``0})">
            <summary>
            Returns the number of elements in a <see cref="T:System.Span`1"/>.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">A <see cref="T:System.Span`1"/> whose elements are to be counted.</param>
            <returns>The number of elements in <paramref name="source"/>.</returns>
            <exception cref="T:System.OverflowException">The number of elements in <paramref name="source"/> is larger than <see cref="F:System.Int32.MaxValue"/>.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Count``1(System.Span{``0},System.Predicate{``0})">
            <summary>
            Returns a number that represents how many elements in the specified sequence satisfy a condition.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">A <see cref="T:System.Span`1"/> that contains elements to be tested and counted.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>A number that represents how many elements in <paramref name="source"/> satisfy the condition in the predicate function.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="predicate"/> is null.</exception> 
            <exception cref="T:System.OverflowException">The number of elements in <paramref name="source"/> is larger than <see cref="F:System.Int32.MaxValue"/>.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Count``1(System.Span{``0},``0)">
            <summary>Counts the number of times the specified <paramref name="value"/> occurs in the <paramref name="source"/>.</summary>
            <typeparam name="T">The element type of the span.</typeparam>
            <param name="source">A <see cref="T:System.Span`1"/> whose elements are to be counted.</param>
            <param name="value">The value for which to search.</param>
            <returns>The number of elements eqaul to <paramref name="value"/> in <paramref name="source"/>.</returns>
            <exception cref="T:System.OverflowException">The number of elements in <paramref name="source"/> is larger than <see cref="F:System.Int32.MaxValue"/>.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Count``1(System.Span{``0},System.ReadOnlySpan{``0})">
            <summary>Counts the number of times the specified <paramref name="value"/> occurs in the <paramref name="source"/>.</summary>
            <typeparam name="T">The element type of the span.</typeparam>
            <param name="source">A <see cref="T:System.Span`1"/> whose elements are to be counted.</param>
            <param name="value">The value for which to search.</param>
            <returns>The number of elements eqaul to <paramref name="value"/> in <paramref name="source"/>.</returns>
            <exception cref="T:System.OverflowException">The number of elements in <paramref name="source"/> is larger than <see cref="F:System.Int32.MaxValue"/>.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.ElementAt``1(System.Span{``0},System.Int32)">
            <summary>
            Returns the element at a specified index in <paramref name="source"/>.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Span`1"/> to return an element from.</param>
            <param name="index">The zero-based index of the element to retrieve.</param> 
            <returns>The element at the specified position in <paramref name="source"/>. </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0 or greater than or equal to the number of elements in <paramref name="source"/>.</exception> 
            <remarks>This method throws an exception if <paramref name="index"/> is out of range. To instead return a default value when the specified index is out of range, use the <see cref="M:SpanExtensions.SpanExtensions.ElementAtOrDefault``1(System.Span{``0},System.Int32)"/> method. </remarks> 
        </member>
        <member name="M:SpanExtensions.SpanExtensions.ElementAt``1(System.Span{``0},System.Index)">
            <summary>
            Returns the element at a specified index in <paramref name="source"/>.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Span`1"/> to return the last element of.</param>
            <param name="index">The index of the element to retrieve, which is either from the beginning or the end of the sequence.</param>
            <returns>The element at the specified position in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is outside the bounds of <paramref name="source"/>.</exception> 
            <remarks>This method throws an exception if <paramref name="index"/> is out of range. To instead return a default value when the specified index is out of range, use the <see cref="M:SpanExtensions.SpanExtensions.ElementAtOrDefault``1(System.Span{``0},System.Index)"/> method. </remarks> 
        </member>
        <member name="M:SpanExtensions.SpanExtensions.ElementAtOrDefault``1(System.Span{``0},System.Int32,``0)">
            <summary>
            Returns the element at a specified index in <paramref name="source"/> or a default value if the index is out of range.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Span`1"/> to return the last element of.</param> 
            <param name="index">The zero-based index of the element to retrieve.</param> 
            <param name="defaultValue">The default value to return if <paramref name="source"/> is empty.</param>
            <returns>The element at the specified position in <paramref name="source"/>. </returns>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.ElementAtOrDefault``1(System.Span{``0},System.Index,``0)">
            <summary>
            Returns the element at a specified index in <paramref name="source"/> or a default value if the index is out of range.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Span`1"/> to return the last element of.</param>
            <param name="index">The index of the element to retrieve, which is either from the beginning or the end of the sequence.</param>
            <param name="defaultValue">The default value to return if <paramref name="source"/> is empty.</param>
            <returns>The element at the specified position in <paramref name="source"/>.</returns>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.ElementAtOrDefault``1(System.Span{``0},System.Int32)">
            <summary>
            Returns the element at a specified index in <paramref name="source"/> or a default value if the index is out of range.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Span`1"/> to return the last element of.</param> 
            <param name="index">The zero-based index of the element to retrieve.</param> 
            <returns>The element at the specified position in <paramref name="source"/>. </returns>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.ElementAtOrDefault``1(System.Span{``0},System.Index)">
            <summary>
            Returns the element at a specified index in <paramref name="source"/> or a default value if the index is out of range.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Span`1"/> to return the last element of.</param>
            <param name="index">The index of the element to retrieve, which is either from the beginning or the end of the sequence.</param>
            <returns>The element at the specified position in <paramref name="source"/>.</returns>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.First``1(System.Span{``0})">
            <summary>
            Returns the first element in a <see cref="T:System.Span`1"/>.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Span`1"/> to return the first element of.</param>
            <returns>The first element in <paramref name="source"/>.</returns>
            <exception cref="T:System.InvalidOperationException"><paramref name="source"/> is empty.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.First``1(System.Span{``0},System.Predicate{``0})">
            <summary>
            Returns the first element in a <see cref="T:System.Span`1"/> that satisfies a specified condition.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Span`1"/> to return the first element of.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>The first element in <paramref name="source"/> that passes the test in the specified <paramref name="predicate"/> function.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="predicate"/> is null.</exception> 
            <exception cref="T:System.InvalidOperationException">No element satisfies the condition in <paramref name="predicate"/>. -or- <paramref name="source"/> is empty.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.FirstOrDefault``1(System.Span{``0},``0)">
            <summary>
            Returns the first element in a <see cref="T:System.Span`1"/>, or a specified default value if the <see cref="T:System.Span`1"/> contains no elements..
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Span`1"/> to return the first element of.</param>
            <param name="defaultValue">The default value to return if <paramref name="source"/> is empty.</param>
            <returns><paramref name="defaultValue"/> if <paramref name="source"/> is empty; otherwise, the first element in <paramref name="source"/>.</returns>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.FirstOrDefault``1(System.Span{``0},System.Predicate{``0},``0)">
            <summary>
            Returns the first element in a <see cref="T:System.Span`1"/> that satisfies a specified condition or a specified default value if no such element is found.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Span`1"/> to return the first element of.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="defaultValue">The default value to return if <paramref name="source"/> is empty.</param>
            <returns>default(T) if <paramref name="source"/> is empty or if no element passes the test specified by <paramref name="predicate"/>; otherwise, the first element in <paramref name="source"/> that passes the test specified by <paramref name="predicate"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="predicate"/> is null.</exception> 
        </member>
        <member name="M:SpanExtensions.SpanExtensions.FirstOrDefault``1(System.Span{``0})">
            <summary>
            Returns the first element in a <see cref="T:System.Span`1"/>, or a specified default value if the <see cref="T:System.Span`1"/> contains no elements..
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Span`1"/> to return the first element of.</param>
            <returns>default(T) if <paramref name="source"/> is empty; otherwise, the first element in <paramref name="source"/>.</returns>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.FirstOrDefault``1(System.Span{``0},System.Predicate{``0})">
            <summary>
            Returns the first element in a <see cref="T:System.Span`1"/> that satisfies a specified conditionor a default value if no such element is found.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Span`1"/> to return the first element of.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>default(T) if <paramref name="source"/> is empty or if no element passes the test specified by <paramref name="predicate"/>; otherwise, the first element in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="predicate"/> is null.</exception> 
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Last``1(System.Span{``0})">
            <summary>
            Returns the last element in a <see cref="T:System.Span`1"/>.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Span`1"/> to return the last element of.</param>
            <returns>The last element in <paramref name="source"/>.</returns>
            <exception cref="T:System.InvalidOperationException"><paramref name="source"/> is empty.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Last``1(System.Span{``0},System.Predicate{``0})">
            <summary>
            Returns the last element in a <see cref="T:System.Span`1"/> that satisfies a specified condition.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Span`1"/> to return the last element of.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>The last element in <paramref name="source"/> that passes the test in the specified <paramref name="predicate"/> function.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="predicate"/> is null.</exception> 
            <exception cref="T:System.InvalidOperationException">No element satisfies the condition in <paramref name="predicate"/>. -or- <paramref name="source"/> is empty.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.LastOrDefault``1(System.Span{``0},``0)">
            <summary>
            Returns the last element in a <see cref="T:System.Span`1"/>, or a specified default value if the <see cref="T:System.Span`1"/> contains no elements..
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Span`1"/> to return the last element of.</param>
            <param name="defaultValue">The default value to return if <paramref name="source"/> is empty.</param>
            <returns><paramref name="defaultValue"/> if <paramref name="source"/> is empty; otherwise, the last element in <paramref name="source"/>.</returns>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.LastOrDefault``1(System.Span{``0},System.Predicate{``0},``0)">
            <summary>
            Returns the last element in a <see cref="T:System.Span`1"/> that satisfies a specified condition or a specified default value if no such element is found.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Span`1"/> to return the last element of.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="defaultValue">The default value to return if <paramref name="source"/> is empty.</param>
            <returns>default(T) if <paramref name="source"/> is empty or if no element passes the test specified by <paramref name="predicate"/>; otherwise, the last element in <paramref name="source"/> that passes the test specified by <paramref name="predicate"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="predicate"/> is null.</exception> 
        </member>
        <member name="M:SpanExtensions.SpanExtensions.LastOrDefault``1(System.Span{``0})">
            <summary>
            Returns the last element in a <see cref="T:System.Span`1"/>, or a specified default value if the <see cref="T:System.Span`1"/> contains no elements..
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Span`1"/> to return the last element of.</param>
            <returns>default(T) if <paramref name="source"/> is empty; otherwise, the last element in <paramref name="source"/>.</returns>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.LastOrDefault``1(System.Span{``0},System.Predicate{``0})">
            <summary>
            Returns the last element in a <see cref="T:System.Span`1"/> that satisfies a specified conditionor a default value if no such element is found.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Span`1"/> to return the last element of.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>default(T) if <paramref name="source"/> is empty or if no element passes the test specified by <paramref name="predicate"/>; otherwise, the last element in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="predicate"/> is null.</exception> 
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Max(System.Span{System.Byte})">
            <summary>
            Returns the maximum value in <paramref name="source"/>.
            </summary>
            <param name="source">A <see cref="T:System.Span`1"/> to determine the maximum value of.</param>
            <returns>The maximum value in <paramref name="source"/>.</returns>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Max(System.Span{System.UInt16})">
            <summary>
            Returns the maximum value in <paramref name="source"/>.
            </summary>
            <param name="source">A <see cref="T:System.Span`1"/> to determine the maximum value of.</param>
            <returns>The maximum value in <paramref name="source"/>.</returns>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Max(System.Span{System.UInt32})">
            <summary>
            Returns the maximum value in <paramref name="source"/>.
            </summary>
            <param name="source">A <see cref="T:System.Span`1"/> to determine the maximum value of.</param>
            <returns>The maximum value in <paramref name="source"/>.</returns>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Max(System.Span{System.UInt64})">
            <summary>
            Returns the maximum value in <paramref name="source"/>.
            </summary>
            <param name="source">A <see cref="T:System.Span`1"/> to determine the maximum value of.</param>
            <returns>The maximum value in <paramref name="source"/>.</returns>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Max(System.Span{System.SByte})">
            <summary>
            Returns the maximum value in <paramref name="source"/>.
            </summary>
            <param name="source">A <see cref="T:System.Span`1"/> to determine the maximum value of.</param>
            <returns>The maximum value in <paramref name="source"/>.</returns>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Max(System.Span{System.Int16})">
            <summary>
            Returns the maximum value in <paramref name="source"/>.
            </summary>
            <param name="source">A <see cref="T:System.Span`1"/> to determine the maximum value of.</param>
            <returns>The maximum value in <paramref name="source"/>.</returns>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Max(System.Span{System.Int32})">
            <summary>
            Returns the maximum value in <paramref name="source"/>.
            </summary>
            <param name="source">A <see cref="T:System.Span`1"/> to determine the maximum value of.</param>
            <returns>The maximum value in <paramref name="source"/>.</returns>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Max(System.Span{System.Int64})">
            <summary>
            Returns the maximum value in <paramref name="source"/>.
            </summary>
            <param name="source">A <see cref="T:System.Span`1"/> to determine the maximum value of.</param>
            <returns>The maximum value in <paramref name="source"/>.</returns>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Max(System.Span{System.Single})">
            <summary>
            Returns the maximum value in <paramref name="source"/>.
            </summary>
            <param name="source">A <see cref="T:System.Span`1"/> to determine the maximum value of.</param>
            <returns>The maximum value in <paramref name="source"/>.</returns>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Max(System.Span{System.Double})">
            <summary>
            Returns the maximum value in <paramref name="source"/>.
            </summary>
            <param name="source">A <see cref="T:System.Span`1"/> to determine the maximum value of.</param>
            <returns>The maximum value in <paramref name="source"/>.</returns>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Max(System.Span{System.Decimal})">
            <summary>
            Returns the maximum value in <paramref name="source"/>.
            </summary>
            <param name="source">A <see cref="T:System.Span`1"/> to determine the maximum value of.</param>
            <returns>The maximum value in <paramref name="source"/>.</returns>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Max(System.Span{System.Numerics.BigInteger})">
            <summary>
            Returns the maximum value in <paramref name="source"/>.
            </summary>
            <param name="source">A <see cref="T:System.Span`1"/> to determine the maximum value of.</param>
            <returns>The maximum value in <paramref name="source"/>.</returns>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Max``1(System.Span{``0},System.Func{``0,System.Byte})">
            <summary>
            Invokes a transform function on each element in <paramref name="source"/> and returns the maximum resulting value.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">A <see cref="T:System.Span`1"/> to determine the maximum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The maximum value in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Max``1(System.Span{``0},System.Func{``0,System.UInt16})">
            <summary> 
            Invokes a transform function on each element of a generic sequence and returns the maximum resulting value.
            </summary>  
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">A <see cref="T:System.Span`1"/> to determine the maximum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The maximum value in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Max``1(System.Span{``0},System.Func{``0,System.UInt32})">
            <summary> 
            Invokes a transform function on each element in <paramref name="source"/> and returns the maximum resulting value.
            </summary>  
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">A <see cref="T:System.Span`1"/> to determine the maximum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The maximum value in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Max``1(System.Span{``0},System.Func{``0,System.UInt64})">
            <summary> 
            Invokes a transform function on each element in <paramref name="source"/> and returns the maximum resulting value.
            </summary>  
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">A <see cref="T:System.Span`1"/> to determine the maximum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The maximum value in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Max``1(System.Span{``0},System.Func{``0,System.SByte})">
            <summary> 
            Invokes a transform function on each element in <paramref name="source"/> and returns the maximum resulting value.
            </summary>  
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">A <see cref="T:System.Span`1"/> to determine the maximum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The maximum value in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Max``1(System.Span{``0},System.Func{``0,System.Int16})">
            <summary> 
            Invokes a transform function on each element in <paramref name="source"/> and returns the maximum resulting value.
            </summary>  
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">A <see cref="T:System.Span`1"/> to determine the maximum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The maximum value in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Max``1(System.Span{``0},System.Func{``0,System.Int32})">
            <summary> 
            Invokes a transform function on each element in <paramref name="source"/> and returns the maximum resulting value.
            </summary>  
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">A <see cref="T:System.Span`1"/> to determine the maximum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The maximum value in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Max``1(System.Span{``0},System.Func{``0,System.Int64})">
            <summary>
            Invokes a transform function on each element in <paramref name="source"/> and returns the maximum resulting value.
            </summary>  
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">A <see cref="T:System.Span`1"/> to determine the maximum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The maximum value in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Max``1(System.Span{``0},System.Func{``0,System.Single})">
            <summary>
            Invokes a transform function on each element in <paramref name="source"/> and returns the maximum resulting value.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam> 
            <param name="source">A <see cref="T:System.Span`1"/> to determine the maximum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The maximum value in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Max``1(System.Span{``0},System.Func{``0,System.Double})">
            <summary> 
            Invokes a transform function on each element in <paramref name="source"/> and returns the maximum resulting value.
            </summary>  
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam> 
            <param name="source">A <see cref="T:System.Span`1"/> to determine the maximum value of.</param>    
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The maximum value in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Max``1(System.Span{``0},System.Func{``0,System.Decimal})">
            <summary> 
            Invokes a transform function on each element in <paramref name="source"/> and returns the maximum resulting value.
            </summary>  
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam> 
            <param name="source">A <see cref="T:System.Span`1"/> to determine the maximum value of.</param>    
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The maximum value in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Max``1(System.Span{``0},System.Func{``0,System.Numerics.BigInteger})">
            <summary> 
            Invokes a transform function on each element in <paramref name="source"/> and returns the maximum resulting value.
            </summary>  
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam> 
            <param name="source">A <see cref="T:System.Span`1"/> to determine the maximum value of.</param>    
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The maximum value in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.MaxBy``2(System.Span{``0},System.Func{``0,``1})">
            <summary>
            Returns the maximum value in a generic sequence according to a specified key selector function.
            </summary>
            <typeparam name="TSource">The type of elements in <paramref name="source"/>.</typeparam>
            <typeparam name="TKey">The type of key to compare elements by.</typeparam>
            <param name="source">A <see cref="T:System.Span`1"/> to determine the maximum value of.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <returns>The value with the maximum key in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="keySelector"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException"><typeparamref name="TSource"/> is a primitive type and <paramref name="source"/> is empty.</exception>
            <remarks>If <paramref name="source"/> is empty and <typeparamref name="TSource"/> is a non-nullable struct, such as a primitive type, an <see cref="T:System.InvalidOperationException"/> is thrown.</remarks>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.MaxBy``2(System.Span{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Returns the maximum value in a generic sequence according to a specified key selector function.
            </summary>
            <typeparam name="TSource">The type of elements in <paramref name="source"/>.</typeparam>
            <typeparam name="TKey">The type of key to compare elements by.</typeparam>
            <param name="source">A <see cref="T:System.Span`1"/> to determine the maximum value of.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> to compare keys.</param>
            <returns>The value with the maximum key in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="keySelector"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException"><typeparamref name="TSource"/> is a primitive type and <paramref name="source"/> is empty.</exception>
            <remarks>If <paramref name="source"/> is empty and <typeparamref name="TSource"/> is a non-nullable struct, such as a primitive type, an <see cref="T:System.InvalidOperationException"/> is thrown.</remarks>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Min(System.Span{System.Byte})">
            <summary>
            Returns the minimum value in <paramref name="source"/>.
            </summary>
            <param name="source">A <see cref="T:System.Span`1"/> to determine the minimum value of.</param>
            <returns>The minimum value in <paramref name="source"/>.</returns>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Min(System.Span{System.UInt16})">
            <summary>
            Returns the minimum value in <paramref name="source"/>.
            </summary>
            <param name="source">A <see cref="T:System.Span`1"/> to determine the minimum value of.</param>
            <returns>The minimum value in <paramref name="source"/>.</returns>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Min(System.Span{System.UInt32})">
            <summary>
            Returns the minimum value in <paramref name="source"/>.
            </summary>
            <param name="source">A <see cref="T:System.Span`1"/> to determine the minimum value of.</param>
            <returns>The minimum value in <paramref name="source"/>.</returns>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Min(System.Span{System.UInt64})">
            <summary>
            Returns the minimum value in <paramref name="source"/>.
            </summary>
            <param name="source">A <see cref="T:System.Span`1"/> to determine the minimum value of.</param>
            <returns>The minimum value in <paramref name="source"/>.</returns>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Min(System.Span{System.SByte})">
            <summary>
            Returns the minimum value in <paramref name="source"/>.
            </summary>
            <param name="source">A <see cref="T:System.Span`1"/> to determine the minimum value of.</param>
            <returns>The minimum value in <paramref name="source"/>.</returns>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Min(System.Span{System.Int16})">
            <summary>
            Returns the minimum value in <paramref name="source"/>.
            </summary>
            <param name="source">A <see cref="T:System.Span`1"/> to determine the minimum value of.</param>
            <returns>The minimum value in <paramref name="source"/>.</returns>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Min(System.Span{System.Int32})">
            <summary>
            Returns the minimum value in <paramref name="source"/>.
            </summary>
            <param name="source">A <see cref="T:System.Span`1"/> to determine the minimum value of.</param>
            <returns>The minimum value in <paramref name="source"/>.</returns>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Min(System.Span{System.Int64})">
            <summary>
            Returns the minimum value in <paramref name="source"/>.
            </summary>
            <param name="source">A <see cref="T:System.Span`1"/> to determine the minimum value of.</param>
            <returns>The minimum value in <paramref name="source"/>.</returns>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Min(System.Span{System.Single})">
            <summary>
            Returns the minimum value in <paramref name="source"/>.
            </summary>
            <param name="source">A <see cref="T:System.Span`1"/> to determine the minimum value of.</param>
            <returns>The minimum value in <paramref name="source"/>.</returns>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Min(System.Span{System.Double})">
            <summary>
            Returns the minimum value in <paramref name="source"/>.
            </summary>
            <param name="source">A <see cref="T:System.Span`1"/> to determine the minimum value of.</param>
            <returns>The minimum value in <paramref name="source"/>.</returns>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Min(System.Span{System.Decimal})">
            <summary>
            Returns the minimum value in <paramref name="source"/>.
            </summary>
            <param name="source">A <see cref="T:System.Span`1"/> to determine the minimum value of.</param>
            <returns>The minimum value in <paramref name="source"/>.</returns>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Min(System.Span{System.Numerics.BigInteger})">
            <summary>
            Returns the minimum value in <paramref name="source"/>.
            </summary>
            <param name="source">A <see cref="T:System.Span`1"/> to determine the minimum value of.</param>
            <returns>The minimum value in <paramref name="source"/>.</returns>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Min``1(System.Span{``0},System.Func{``0,System.Byte})">
            <summary>
            Invokes a transform function on each element in <paramref name="source"/> and returns the minimum resulting value.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">A <see cref="T:System.Span`1"/> to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The minimum value in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Min``1(System.Span{``0},System.Func{``0,System.UInt16})">
            <summary>
            Invokes a transform function on each element in <paramref name="source"/> and returns the minimum resulting value.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">A <see cref="T:System.Span`1"/> to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The minimum value in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Min``1(System.Span{``0},System.Func{``0,System.UInt32})">
            <summary>
            Invokes a transform function on each element in <paramref name="source"/> and returns the minimum resulting value.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">A <see cref="T:System.Span`1"/> to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The minimum value in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Min``1(System.Span{``0},System.Func{``0,System.UInt64})">
            <summary>
            Invokes a transform function on each element in <paramref name="source"/> and returns the minimum resulting value.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">A <see cref="T:System.Span`1"/> to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The minimum value in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Min``1(System.Span{``0},System.Func{``0,System.SByte})">
            <summary>
            Invokes a transform function on each element in <paramref name="source"/> and returns the minimum resulting value.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">A <see cref="T:System.Span`1"/> to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The minimum value in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Min``1(System.Span{``0},System.Func{``0,System.Int16})">
            <summary>
            Invokes a transform function on each element in <paramref name="source"/> and returns the minimum resulting value.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">A <see cref="T:System.Span`1"/> to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The minimum value in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Min``1(System.Span{``0},System.Func{``0,System.Int32})">
            <summary>
            Invokes a transform function on each element in <paramref name="source"/> and returns the minimum resulting value.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">A <see cref="T:System.Span`1"/> to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The minimum value in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Min``1(System.Span{``0},System.Func{``0,System.Int64})">
            <summary>
            Invokes a transform function on each element in <paramref name="source"/> and returns the minimum resulting value.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">A <see cref="T:System.Span`1"/> to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The minimum value in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Min``1(System.Span{``0},System.Func{``0,System.Single})">
            <summary>
            Invokes a transform function on each element in <paramref name="source"/> and returns the minimum resulting value.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">A <see cref="T:System.Span`1"/> to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The minimum value in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Min``1(System.Span{``0},System.Func{``0,System.Double})">
            <summary>
            Invokes a transform function on each element in <paramref name="source"/> and returns the minimum resulting value.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">A <see cref="T:System.Span`1"/> to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The minimum value in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Min``1(System.Span{``0},System.Func{``0,System.Decimal})">
            <summary>
            Invokes a transform function on each element in <paramref name="source"/> and returns the minimum resulting value.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">A <see cref="T:System.Span`1"/> to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The minimum value in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Min``1(System.Span{``0},System.Func{``0,System.Numerics.BigInteger})">
            <summary>
            Invokes a transform function on each element in <paramref name="source"/> and returns the minimum resulting value.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">A <see cref="T:System.Span`1"/> to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The minimum value in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.MinBy``2(System.Span{``0},System.Func{``0,``1})">
            <summary>
            Returns the minimum value in a generic sequence according to a specified key selector function.
            </summary>
            <typeparam name="TSource">The type of elements in <paramref name="source"/>.</typeparam>
            <typeparam name="TKey">The type of key to compare elements by.</typeparam>
            <param name="source">A <see cref="T:System.Span`1"/> to determine the minimum value of.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <returns>The value with the minimum key in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="keySelector"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException"><typeparamref name="TSource"/> is a primitive type and <paramref name="source"/> is empty.</exception>
            <remarks>If <paramref name="source"/> is empty and <typeparamref name="TSource"/> is a non-nullable struct, such as a primitive type, an <see cref="T:System.InvalidOperationException"/> is thrown.</remarks>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.MinBy``2(System.Span{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Returns the minimum value in a generic sequence according to a specified key selector function.
            </summary>
            <typeparam name="TSource">The type of elements in <paramref name="source"/>.</typeparam>
            <typeparam name="TKey">The type of key to compare elements by.</typeparam>
            <param name="source">A <see cref="T:System.Span`1"/> to determine the minimum value of.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> to compare keys.</param>
            <returns>The value with the minimum key in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="keySelector"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException"><typeparamref name="TSource"/> is a primitive type and <paramref name="source"/> is empty.</exception>
            <remarks>If <paramref name="source"/> is empty and <typeparamref name="TSource"/> is a non-nullable struct, such as a primitive type, an <see cref="T:System.InvalidOperationException"/> is thrown.</remarks>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Single``1(System.Span{``0})">
            <summary>
            Returns the only element in <see cref="T:System.Span`1"/>, and throws an exception if there is not exactly one element in the <see cref="T:System.Span`1"/>.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Span`1"/> to return the single element of.</param>
            <returns>The single element in <paramref name="source"/>.</returns>
            <exception cref="T:System.InvalidOperationException"><paramref name="source"/> contains more than one element -or- <paramref name="source"/> is empty.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Single``1(System.Span{``0},System.Predicate{``0})">
            <summary>
            Returns the only element in <see cref="T:System.Span`1"/> that satisfies a specified condition, and throws an exception if more than one such element exists.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Span`1"/> to return the single element of.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>The single element in <paramref name="source"/> that satisfies a condition.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="predicate"/> is null.</exception> 
            <exception cref="T:System.InvalidOperationException">No element satisfies the condition in <paramref name="predicate"/>. -or- More than one element satisfies the condition in <paramref name="predicate"/>. -or- <paramref name="source"/> is empty.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.SingleOrDefault``1(System.Span{``0},``0)">
            <summary>
            Returns the only element in <see cref="T:System.Span`1"/>, and throws an exception if there is not exactly one element in the <see cref="T:System.Span`1"/>.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Span`1"/> to return the single element of.</param>
            /// <param name="defaultValue">The default value to return if <paramref name="source"/> is empty.</param>
            <returns>The single element in <paramref name="source"/>.</returns>
            <exception cref="T:System.InvalidOperationException"><paramref name="source"/> contains more than one element -or- <paramref name="source"/> is empty.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.SingleOrDefault``1(System.Span{``0},System.Predicate{``0},``0)">
            <summary>
            Returns the first element in a <see cref="T:System.Span`1"/> that satisfies a specified condition or a specified default value if no such element is found.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Span`1"/> to return the first element of.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="defaultValue">The default value to return if <paramref name="source"/> is empty.</param>
            <returns>default(T) if <paramref name="source"/> is empty or if no element passes the test specified by <paramref name="predicate"/>; otherwise, the first element in <paramref name="source"/> that passes the test specified by <paramref name="predicate"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="predicate"/> is null.</exception> 
        </member>
        <member name="M:SpanExtensions.SpanExtensions.SingleOrDefault``1(System.Span{``0})">
            <summary>
            Returns the only element in <see cref="T:System.Span`1"/>, and throws an exception if there is not exactly one element in the <see cref="T:System.Span`1"/>.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Span`1"/> to return the single element of.</param>
            <returns>The single element in <paramref name="source"/>.</returns>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.SingleOrDefault``1(System.Span{``0},System.Predicate{``0})">
            <summary>
            Returns the only element in <see cref="T:System.Span`1"/> that satisfies a specified condition, and throws an exception if more than one such element exists.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Span`1"/> to return the single element of.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>The single element in <paramref name="source"/> that satisfies a condition.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="predicate"/> is null.</exception> 
            <exception cref="T:System.InvalidOperationException">No element satisfies the condition in <paramref name="predicate"/>. -or- More than one element satisfies the condition in <paramref name="predicate"/>. -or- <paramref name="source"/> is empty.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Skip``1(System.Span{``0},System.Int32)">
            <summary>
            Bypasses a specified number of elements in <paramref name="source"/> and then returns the remaining elements.
            </summary>
            <typeparam name="T">The type of elements in the <see cref="T:System.Span`1"/>.</typeparam>
            <param name="source">The <see cref="T:System.Span`1"/> to operate on.</param>
            <param name="count">The Number of elements to bypass.</param>
            <returns>A <see cref="T:System.Span`1"/> that contains the elements that occur after <paramref name="count"/> elements have been bypassed in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.SkipLast``1(System.ReadOnlySpan{``0},System.Int32)">
            <summary>
            Returns a new <see cref="T:System.ReadOnlySpan`1"/> that contains the elements from source with the last <paramref name="count"/> elements of the source collection omitted.
            </summary>
            <typeparam name="T">The type of elements in the <see cref="T:System.ReadOnlySpan`1"/>.</typeparam>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to operate on.</param>
            <param name="count">The number of elements to omit from the end of <paramref name="source"/>.</param>
            <returns>A new <see cref="T:System.ReadOnlySpan`1"/> that contains the elements from <paramref name="source"/> minus <paramref name="count"/> elements from the end of the collection.</returns>
            <remarks>If <paramref name="count"/> is not a positive number, this method returns <see cref="P:System.ReadOnlySpan`1.Empty"/>.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.SkipWhile``1(System.Span{``0},System.Predicate{``0})">
            <summary>
            Bypasses elements in <paramref name="source"/> as long as a <paramref name="condition"/> is true and then returns the remaining elements. The element's index is used in the logic of the predicate function.
            </summary>
            <typeparam name="T">The type of elements in the <see cref="T:System.Span`1"/>.</typeparam>
            <param name="source">The <see cref="T:System.Span`1"/> to operate on.</param>
            <param name="condition">A function to test each element for a condition.</param>
            <returns>A <see cref="T:System.Span`1"/> that contains the elements from <paramref name="source"/> starting at the first element in the linear series that does not pass the specified <paramref name="condition" />.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="condition"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Sum(System.Span{System.Byte})">
            <summary>
            Computes the Sum of all the elements in <paramref name="source"/>.
            </summary>
            <param name="source">The <see cref="T:System.Span`1"/> to operate on.</param>
            <returns>The Sum of all the elements in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Sum(System.Span{System.UInt16})">
            <summary>
            Computes the Sum of all the elements in <paramref name="source"/>.
            </summary>
            <param name="source">The <see cref="T:System.Span`1"/> to operate on.</param>
            <returns>The Sum of all the elements in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Sum(System.Span{System.UInt32})">
            <summary>
            Computes the Sum of all the elements in <paramref name="source"/>.
            </summary>
            <param name="source">The <see cref="T:System.Span`1"/> to operate on.</param>
            <returns>The Sum of all the elements in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Sum(System.Span{System.UInt64})">
            <summary>
            Computes the Sum of all the elements in <paramref name="source"/>.
            </summary>
            <param name="source">The <see cref="T:System.Span`1"/> to operate on.</param>
            <returns>The Sum of all the elements in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Sum(System.Span{System.SByte})">
            <summary>
            Computes the Sum of all the elements in <paramref name="source"/>.
            </summary>
            <param name="source">The <see cref="T:System.Span`1"/> to operate on.</param>
            <returns>The Sum of all the elements in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Sum(System.Span{System.Int16})">
            <summary>
            Computes the Sum of all the elements in <paramref name="source"/>.
            </summary>
            <param name="source">The <see cref="T:System.Span`1"/> to operate on.</param>
            <returns>The Sum of all the elements in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Sum(System.Span{System.Int32})">
            <summary>
            Computes the Sum of all the elements in <paramref name="source"/>.
            </summary>
            <param name="source">The <see cref="T:System.Span`1"/> to operate on.</param>
            <returns>The Sum of all the elements in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Sum(System.Span{System.Int64})">
            <summary>
            Computes the Sum of all the elements in <paramref name="source"/>.
            </summary>
            <param name="source">The <see cref="T:System.Span`1"/> to operate on.</param>
            <returns>The Sum of all the elements in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Sum(System.Span{System.Single})">
            <summary>
            Computes the Sum of all the elements in <paramref name="source"/>.
            </summary>
            <param name="source">The <see cref="T:System.Span`1"/> to operate on.</param>
            <returns>The Sum of all the elements in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Sum(System.Span{System.Double})">
            <summary>
            Computes the Sum of all the elements in <paramref name="source"/>.
            </summary>
            <param name="source">The <see cref="T:System.Span`1"/> to operate on.</param>
            <returns>The Sum of all the elements in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Sum(System.Span{System.Decimal})">
            <summary>
            Computes the Sum of all the elements in <paramref name="source"/>.
            </summary>
            <param name="source">The <see cref="T:System.Span`1"/> to operate on.</param>
            <returns>The Sum of all the elements in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Sum(System.Span{System.Numerics.BigInteger})">
            <summary>
            Computes the Sum of all the elements in <paramref name="source"/>.
            </summary>
            <param name="source">The <see cref="T:System.Span`1"/> to operate on.</param>
            <returns>The Sum of all the elements in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Take``1(System.Span{``0},System.Int32)">
            <summary>
            Returns a specified number of contiguous elements from the start of a <see cref="T:System.Span`1"/>.
            </summary>
            <typeparam name="T">The type of elements in the <see cref="T:System.Span`1"/>.</typeparam>
            <param name="source">The <see cref="T:System.Span`1"/> to operate on.</param>
            <param name="count">The Number of elements to take.</param>
            <returns>A <see cref="T:System.Span`1"/> that contains <paramref name="count"/> elements from the start of the input sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.TakeLast``1(System.Span{``0},System.Int32)">
            <summary>
            Returns a new <see cref="T:System.Span`1"/> that contains the last <paramref name="count"/> elements from <paramref name="source"/>.
            </summary>
            <typeparam name="T">The type of elements in the <see cref="T:System.Span`1"/>.</typeparam>
            <param name="source">The <see cref="T:System.Span`1"/> to operate on.</param>
            <param name="count">The number of elements to take from the end of <paramref name="source"/>.</param>
            <returns>A new <see cref="T:System.Span`1"/> that contains the last <paramref name="count"/> elements from <paramref name="source"/>.</returns>
            <remarks>If <paramref name="count"/> is not a positive number, this method returns <see cref="P:System.Span`1.Empty"/>.</remarks>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.TakeWhile``1(System.Span{``0},System.Predicate{``0})">
             <summary>
            Returns elements from <paramref name="source"/> as long as a specified <paramref name="condition"/> is true, and then skips the remaining elements.
            </summary>
            <typeparam name="T">The type of elements in the <see cref="T:System.Span`1"/>.</typeparam>
            <param name="source">The <see cref="T:System.Span`1"/> to operate on.</param>
            <param name="condition">A function to test each element for a condition.</param>
            <returns>A <see cref="T:System.Span`1"/> that contains elements from <paramref name="source"/> that occur before the element at which the <paramref name="condition"/> no longer passes.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="condition"/> is null.</exception>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Remove``1(System.Span{``0},System.Int32)">
            <summary>
            Returns a new <see cref="T:System.Span`1"/> in which all the characters in the current instance, beginning at <paramref name="startIndex"/> and continuing through the last position, have been deleted.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Span`1"/> to operate on.</param>
            <param name="startIndex">The zero-based position to begin deleting characters.</param>
            <returns>A new <see cref="T:System.Span`1"/> that is equivalent to <paramref name="source"/> except for the removed characters.</returns>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Replace``1(System.Span{``0},``0,``0)">
            <summary>
            Replaces every occurence of <paramref name="oldT"/> in <paramref name="source"/> with an instance of <paramref name="newT"/>.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Span`1"/> to operate on.</param>
            <param name="oldT">The <typeparamref name="T"/> to be replaced.</param>
            <param name="newT">The <typeparamref name="T"/> <paramref name="oldT"/> is to be replaced by.</param>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Split``1(System.Span{``0},``0)">
            <summary>
            Splits a <see cref="T:System.Span`1"/> into multiple ReadOnlySpans based on the specified <paramref name="delimiter"/>.
            </summary>
            <typeparam name="T">The type of elements in the <see cref="T:System.Span`1"/>.</typeparam>
            <param name="source">The <see cref="T:System.Span`1"/> to be split.</param>
            <param name="delimiter">An instance of <typeparamref name="T"/> that delimits the various sub-ReadOnlySpans in <paramref name="source"/>.</param>
            <returns>An instance of the ref struct <see cref="T:SpanExtensions.Enumerators.SpanSplitEnumerator`1"/>, which works the same way as every <see cref="T:System.Collections.IEnumerator"/> does and can be used in a foreach construct.</returns>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Split``1(System.Span{``0},``0,System.Int32,SpanExtensions.CountExceedingBehaviour)">
            <summary>
            Splits a <see cref="T:System.Span`1"/> into at most <paramref name="count"/> ReadOnlySpans based on the specified <paramref name="delimiter"/>.
            </summary>
            <typeparam name="T">The type of elements in the <see cref="T:System.Span`1"/>.</typeparam>
            <param name="source">The <see cref="T:System.Span`1"/> to be split.</param>
            <param name="delimiter">An instance of <typeparamref name="T"/> that delimits the various sub-ReadOnlySpans in <paramref name="source"/>.</param>
            <param name="count">The maximum number of sub-ReadOnlySpans to split into.</param>
            <param name="countExceedingBehaviour">The handling of the instances more than count.</param>
            <returns>An instance of the ref struct <see cref="T:SpanExtensions.Enumerators.SpanSplitWithCountEnumerator`1"/>, which works the same way as every <see cref="T:System.Collections.IEnumerator"/> does and can be used in a foreach construct.</returns>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Split(System.Span{System.Char},System.Char,System.StringSplitOptions)">
            <summary>
            Splits a <see cref="T:System.Span`1"/> into multiple ReadOnlySpans based on the specified <paramref name="delimiter"/> and the specified <paramref name="options"/>.
            </summary>
            <param name="source">The <see cref="T:System.Span`1"/> to be split.</param>
            <param name="delimiter">A <see cref="T:System.Char"/> that delimits the various sub-ReadOnlySpans in <paramref name="source"/>.</param>
            <param name="options">A bitwise combination of the enumeration values that specifies whether to trim results and include empty results.</param>
            <returns>An instance of the ref struct <see cref="T:SpanExtensions.Enumerators.SpanSplitStringSplitOptionsEnumerator"/>, which works the same way as every <see cref="T:System.Collections.IEnumerator"/> does and can be used in a foreach construct.</returns>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Split(System.Span{System.Char},System.Char,System.Int32,System.StringSplitOptions,SpanExtensions.CountExceedingBehaviour)">
            <summary>
            Splits a <see cref="T:System.Span`1"/> into at most <paramref name="count"/> ReadOnlySpans based on the specified <paramref name="delimiter"/> and the specified <paramref name="options"/>.
            </summary>
            <param name="source">The <see cref="T:System.Span`1"/> to be split.</param>
            <param name="delimiter">A <see cref="T:System.Char"/> that delimits the various sub-ReadOnlySpans in <paramref name="source"/>.</param>
            <param name="count">The maximum number of sub-ReadOnlySpans to split into.</param>
            <param name="options">A bitwise combination of the enumeration values that specifies whether to trim results and include empty results.</param>
            <param name="countExceedingBehaviour">The handling of the instances more than count.</param>
            <returns>An instance of the ref struct <see cref="T:SpanExtensions.Enumerators.SpanSplitAnyStringSplitOptionsWithCountEnumerator"/>, which works the same way as every <see cref="T:System.Collections.IEnumerator"/> does and can be used in a foreach construct.</returns>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.SplitAny``1(System.Span{``0},System.ReadOnlySpan{``0})">
            <summary>
            Splits a <see cref="T:System.Span`1"/> into multiple ReadOnlySpans based on the any of the specified <paramref name="delimiters"/>.
            </summary>
            <typeparam name="T">The type of elements in the <see cref="T:System.Span`1"/>.</typeparam>
            <param name="source">The <see cref="T:System.Span`1"/> to be split.</param>
            <param name="delimiters">A <see cref="T:System.ReadOnlySpan`1"/>, that delimit the various sub-ReadOnlySpans in <paramref name="source"/>.</param>
            <returns>An instance of the ref struct <see cref="T:SpanExtensions.Enumerators.SpanSplitAnyEnumerator`1"/>, which works the same way as every <see cref="T:System.Collections.IEnumerator"/> does and can be used in a foreach construct.</returns>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.SplitAny``1(System.Span{``0},System.ReadOnlySpan{``0},System.Int32,SpanExtensions.CountExceedingBehaviour)">
            <summary>
            Splits a <see cref="T:System.Span`1"/> into at most <paramref name="count"/> ReadOnlySpans based on the any of the specified  <paramref name="delimiters"/>.
            </summary>
            <typeparam name="T">The type of elements in the <see cref="T:System.ReadOnlySpan`1"/>.</typeparam>
            <param name="source">The <see cref="T:System.Span`1"/> to be split.</param>
            <param name="count">The maximum number of sub-ReadOnlySpans to split into.</param>
            <param name="delimiters">A <see cref="T:System.ReadOnlySpan`1"/>, that delimit the various sub-ReadOnlySpans in <paramref name="source"/>.</param>
            <param name="countExceedingBehaviour">The handling of the instances more than count.</param>
            <returns>An instance of the ref struct <see cref="T:SpanExtensions.Enumerators.SpanSplitAnyWithCountEnumerator`1"/>, which works the same way as every <see cref="T:System.Collections.IEnumerator"/> does and can be used in a foreach construct.</returns>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.SplitAny(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.StringSplitOptions)">
            <summary>
            Splits a <see cref="T:System.Span`1"/> into multiple ReadOnlySpans based on the any of the specified <paramref name="delimiters"/>.
            </summary>
            <param name="source">The <see cref="T:System.Span`1"/> to be split.</param>
            <param name="delimiters">A <see cref="T:System.ReadOnlySpan`1"/>, that delimit the various sub-ReadOnlySpans in <paramref name="source"/>.</param>
            <param name="options">A bitwise combination of the enumeration values that specifies whether to trim results and include empty results.</param>
            <returns>An instance of the ref struct <see cref="T:SpanExtensions.Enumerators.SpanSplitAnyStringSplitOptionsEnumerator"/>, which works the same way as every <see cref="T:System.Collections.IEnumerator"/> does and can be used in a foreach construct.</returns>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.SplitAny(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.Int32,System.StringSplitOptions,SpanExtensions.CountExceedingBehaviour)">
            <summary>
            Splits a <see cref="T:System.Span`1"/> into at most <paramref name="count"/> ReadOnlySpans based on the any of the specified <paramref name="delimiters"/>.
            </summary>
            <param name="source">The <see cref="T:System.Span`1"/> to be split.</param>
            <param name="delimiters">A <see cref="T:System.ReadOnlySpan`1"/>, that delimit the various sub-ReadOnlySpans in <paramref name="source"/>.</param>
            <param name="options">A bitwise combination of the enumeration values that specifies whether to trim results and include empty results.</param>
            <param name="count">The maximum number of sub-ReadOnlySpans to split into.</param>
            <param name="countExceedingBehaviour">The handling of the instances more than count.</param>
            <returns>An instance of the ref struct <see cref="T:SpanExtensions.Enumerators.SpanSplitAnyStringSplitOptionsWithCountEnumerator"/>, which works the same way as every <see cref="T:System.Collections.IEnumerator"/> does and can be used in a foreach construct.</returns>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Split``1(System.Span{``0},System.ReadOnlySpan{``0})">
            <summary>
            Splits a <see cref="T:System.Span`1"/> into multiple ReadOnlySpans based on the specified <paramref name="delimiter"/>.
            </summary>
            <typeparam name="T">The type of elements in the <see cref="T:System.ReadOnlySpan`1"/>.</typeparam>
            <param name="source">The <see cref="T:System.Span`1"/> to be split.</param>
            <param name="delimiter">An instance of <see cref="T:System.ReadOnlySpan`1"/> that delimits the various sub-ReadOnlySpans in <paramref name="source"/>.</param>
            <returns>An instance of the ref struct <see cref="T:SpanExtensions.Enumerators.SpanSplitSequenceEnumerator`1"/>, which works the same way as every <see cref="T:System.Collections.IEnumerator"/> does and can be used in a foreach construct.</returns>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Split``1(System.Span{``0},System.ReadOnlySpan{``0},System.Int32,SpanExtensions.CountExceedingBehaviour)">
            <summary>
            Splits a <see cref="T:System.Span`1"/> into at most <paramref name="count"/> ReadOnlySpans based on the specified <paramref name="delimiter"/>.
            </summary>
            <typeparam name="T">The type of elements in the <see cref="T:System.ReadOnlySpan`1"/>.</typeparam>
            <param name="source">The <see cref="T:System.Span`1"/> to be split.</param>
            <param name="delimiter">An instance of <see cref="T:System.ReadOnlySpan`1"/> that delimits the various sub-ReadOnlySpans in <paramref name="source"/>.</param>
            <param name="count">The maximum number of sub-ReadOnlySpans to split into.</param>
            <param name="countExceedingBehaviour">The handling of the instances more than count.</param>
            <returns>An instance of the ref struct , which works the same way as every <see cref="T:System.Collections.IEnumerator"/> does and can be used in a foreach construct.</returns>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Split(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.StringSplitOptions)">
            <summary>
            Splits a <see cref="T:System.Span`1"/> into multiple ReadOnlySpans based on the specified <paramref name="delimiter"/>.
            </summary>
            <param name="source">The <see cref="T:System.Span`1"/> to be split.</param>
            <param name="delimiter">An instance of <see cref="T:System.ReadOnlySpan`1"/> that delimits the various sub-ReadOnlySpans in <paramref name="source"/>.</param>
            <param name="options">A bitwise combination of the enumeration values that specifies whether to trim results and include empty results.</param>
            <returns>An instance of the ref struct <see cref="T:SpanExtensions.Enumerators.SpanSplitSequenceStringSplitOptionsEnumerator"/>, which works the same way as every <see cref="T:System.Collections.IEnumerator"/> does and can be used in a foreach construct.</returns>
        </member>
        <member name="M:SpanExtensions.SpanExtensions.Split(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.Int32,System.StringSplitOptions,SpanExtensions.CountExceedingBehaviour)">
            <summary>
            Splits a <see cref="T:System.Span`1"/> into at most <paramref name="count"/> ReadOnlySpans based on the specified <paramref name="delimiter"/>.
            </summary>
            <param name="source">The <see cref="T:System.Span`1"/> to be split.</param>
            <param name="delimiter">An instance of <see cref="T:System.ReadOnlySpan`1"/> that delimits the various sub-Spans in the <see cref="T:System.ReadOnlySpan`1"/>.</param>
            /// <param name="count">The maximum number of sub-ReadOnlySpans to split into.</param>
            <param name="options">A bitwise combination of the enumeration values that specifies whether to trim results and include empty results.</param>
            <param name="countExceedingBehaviour">The handling of the instances more than count.</param>
            <returns>An instance of the ref struct <see cref="T:SpanExtensions.Enumerators.SpanSplitSequenceStringSplitOptionsWithCountEnumerator"/>, which works the same way as every <see cref="T:System.Collections.IEnumerator"/> does and can be used in a foreach construct.</returns>
        </member>
    </members>
</doc>
